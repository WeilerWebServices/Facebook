include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
SET @@GLOBAL.WRITE_STATS_FREQUENCY=3;
SET @@GLOBAL.SQL_STATS_CONTROL="ON";
SET @@GLOBAL.WRITE_STATS_COUNT=10;
SET @@GLOBAL.WRITE_AUTO_THROTTLE_FREQUENCY=3;
SET @@GLOBAL.WRITE_STATS_FREQUENCY=3;
SET @@GLOBAL.WRITE_THROTTLE_LAG_PCT_MIN_SECONDARIES=10;
SET @@GLOBAL.WRITE_START_THROTTLE_LAG_MILLISECONDS=3000;
SET @@GLOBAL.WRITE_STOP_THROTTLE_LAG_MILLISECONDS=1000;
SET @@GLOBAL.WRITE_THROTTLE_MIN_RATIO=1.5;
SET @@GLOBAL.WRITE_THROTTLE_MONITOR_CYCLES=1;
SET @@GLOBAL.WRITE_CONTROL_LEVEL=WARN;
create table t(a int) engine=innodb;
select @@GLOBAL.WRITE_STATS_FREQUENCY into @ws_freq;
select @@GLOBAL.WRITE_AUTO_THROTTLE_FREQUENCY into @wat_freq;
### We use the following sleep statement throughout this test to deterministically enforce the auto_throttling system to check for 
### lag for the next write statement and enforce a new time bucket for write statistics collection
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
####################################################
### Test 1: Auto throttle start & stop based on sql_id
####################################################
insert into t values(1);
insert into t values(2);
delete from t where a = 2;
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	108
CLIENT	99914b932bd37a50b983c5e7c90ae93b	108
SHARD	test	108
SQL_ID	1586ffa412d4a296baf93bdd932f03d7	36
SQL_ID	2cea509ba0e3065c09c1efe4c77e392a	72
set @@global.debug= '+d,dbug.simulate_lag_above_start_throttle_threshold';
####### Next Cycle #######
### Expectation - There is replication lag. The system should identity insert query sql_id as the culprit and start monitoring it ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
insert into t values(2);
insert into t values(2);
delete from t where a = 2;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
####### Next Cycle #######
### Expectation - Replication lag still persists, Insert query sql_id should be throttled. Expect warnings. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
insert into t values(2);
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
SQL_ID	2cea509ba0e3065c09c1efe4c77e392a
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	1
select count from information_schema.write_throttling_log where type = 'SQL_ID' and mode = 'AUTO';
count
1
####### Next Cycle #######
### Expectation - Replication lag between start and end threshold, Expect warning for every insert query. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
set @@global.debug= '-d,dbug.simulate_lag_above_start_throttle_threshold';
set @@global.debug= '+d,dbug.simulate_lag_between_start_end_throttle_threshold';
insert into t values(2);
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	2
select count from information_schema.write_throttling_log where type = 'SQL_ID' and mode = 'AUTO';
count
2
####### Next Cycle #######
### Expectation - Replication lag goes away, Insert query should not be throttled anymore. Expect warnings count to not increase anymore. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
set @@global.debug= '-d,dbug.simulate_lag_between_start_end_throttle_threshold';
set @@global.debug= '+d,dbug.simulate_lag_below_end_throttle_threshold';
insert into t values(2);
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	2
select count from information_schema.write_throttling_log where type = 'SQL_ID' and mode = 'AUTO';
count
2
####### Reset #######
TRUNCATE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
flush statistics;
set @@global.debug= '-d,dbug.simulate_lag_below_end_throttle_threshold';
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
####################################################
### Test 2: Auto throttle start & stop based on shard
####################################################
SET @@GLOBAL.WRITE_STATS_COUNT=10;
create database test1;
create table test1.t(a int) engine=innodb;
insert into test.t values(2);
delete from test.t where a = 2;
insert into test1.t values(2);
delete from test1.t where a = 2;
set @@global.debug= '+d,dbug.simulate_lag_above_start_throttle_threshold';
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	144
CLIENT	99914b932bd37a50b983c5e7c90ae93b	144
SHARD	test	144
SQL_ID	725b9fef2a54aea58bb80fe31af1cb88	36
SQL_ID	494bb2dc69dd407b05c40cde52aabbaf	36
SQL_ID	a55a8f3e636afbb0ca6168a0e024ee84	36
SQL_ID	5a2a9251c1b582bd13192a8685dd6006	36
####### Next Cycle #######
### Expectation - There is replication lag. The system should identity shard 'test' as the culprit since there is no conclusive sql_id culprit. Should start monitoring 'test' shard ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
insert into test1.t values(2);
delete from test1.t where a = 2;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
####### Next Cycle #######
### Expectation - Replication lag still persists, Shard 'test' should be throttled. Expect warnings. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
insert into test1.t values(2);
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
SHARD	test
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	1
select count from information_schema.write_throttling_log where type = 'SHARD' and mode = 'AUTO';
count
1
####### Next Cycle #######
### Expectation - Replication lag goes away, Shard 'test' should not be throttled anymore. Expect warnings count to not increase anymore. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
set @@global.debug= '-d,dbug.simulate_lag_above_start_throttle_threshold';
set @@global.debug= '+d,dbug.simulate_lag_below_end_throttle_threshold';
insert into test1.t values(2);
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	1
select count from information_schema.write_throttling_log where type = 'SHARD' and mode = 'AUTO';
count
1
####### Reset #######
TRUNCATE test.t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
drop database test1;
flush statistics;
set @@global.debug= '-d,dbug.simulate_lag_below_end_throttle_threshold';
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
####################################################
### Test 3: Auto throttle fallback sql id in case of no 
### conclusive culprit
####################################################
SET @@GLOBAL.WRITE_STATS_COUNT=10;
SET @@GLOBAL.WRITE_THROTTLE_MIN_RATIO=3;
create database test1;
create table test1.t(a int) engine=innodb;
insert into test.t values(2);
insert into test.t values(2);
delete from test.t where a = 2;
insert into test1.t values(2);
delete from test1.t where a = 2;
set @@global.debug= '+d,dbug.simulate_lag_above_start_throttle_threshold';
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	185
CLIENT	99914b932bd37a50b983c5e7c90ae93b	185
SHARD	test	185
SQL_ID	725b9fef2a54aea58bb80fe31af1cb88	36
SQL_ID	494bb2dc69dd407b05c40cde52aabbaf	36
SQL_ID	a55a8f3e636afbb0ca6168a0e024ee84	72
SQL_ID	5a2a9251c1b582bd13192a8685dd6006	41
set @@global.debug= '+d,dbug.simulate_fallback_sql_throttling';
####### Next Cycle #######
### Expectation - There is replication lag. As per the setup, the system should fallback to monitoring the top sql_id(insert query) with most bytes written. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
insert into test.t values(2);
insert into test.t values(2);
delete from test.t where a = 2;
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	113
CLIENT	99914b932bd37a50b983c5e7c90ae93b	113
SHARD	test	113
SQL_ID	5a2a9251c1b582bd13192a8685dd6006	41
SQL_ID	a55a8f3e636afbb0ca6168a0e024ee84	72
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
####### Next Cycle #######
### Expectation - Replication lag still persists, Insert query sql_id should be throttled. Expect warnings. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
insert into test.t values(2);
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
SQL_ID	a55a8f3e636afbb0ca6168a0e024ee84
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	1
####### Next Cycle #######
### Expectation - Replication lag goes away, Insert query sql_id should not be throttled anymore. Expect warnings count to not increase anymore. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
set @@global.debug= '-d,dbug.simulate_lag_above_start_throttle_threshold';
set @@global.debug= '+d,dbug.simulate_lag_below_end_throttle_threshold';
insert into test.t values(2);
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	1
####### Reset #######
TRUNCATE test.t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
SET @@GLOBAL.WRITE_THROTTLE_MIN_RATIO=1.5;
drop database test1;
flush statistics;
set @@global.debug= '-d,dbug.simulate_lag_below_end_throttle_threshold';
set @@global.debug= '-d,dbug.simulate_fallback_sql_throttling';
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
####################################################
### Test 4: Auto throttle multiple sql_ids and releasing
### them in order one by one after replication lag goes away
####################################################
SET @@GLOBAL.WRITE_STATS_COUNT=10;
SET @@GLOBAL.WRITE_THROTTLE_MONITOR_CYCLES=0;
insert into t values(1);
insert into t values(2);
insert into t values(3);
insert into t values(4);
delete from t where a = 1;
delete from t where a = 2;
update t set a = 1 where a = 3;
update t set a = 2 where a = 4;
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	300
CLIENT	99914b932bd37a50b983c5e7c90ae93b	300
SHARD	test	300
SQL_ID	2fec1ab9f8d260a5cbdba621b111dc62	84
SQL_ID	2cea509ba0e3065c09c1efe4c77e392a	144
SQL_ID	1586ffa412d4a296baf93bdd932f03d7	72
set @@global.debug= '+d,dbug.simulate_lag_above_start_throttle_threshold';
####### Next Cycle #######
### Expectation - There is replication lag. The system should identify insert query sql_id as the culprit and start throttling it. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
insert into t values(3);
update t set a = 4 where a = 3;
delete from t where a = 1;
delete from t where a = 2;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
SQL_ID	2cea509ba0e3065c09c1efe4c77e392a
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	1
####### Next Cycle #######
### Expectation - Replication lag still persists. The system should identify delete query sql_id as the culprit and start throttling it as well. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
insert into t values(3);
delete from t where a = 4;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
SQL_ID	1586ffa412d4a296baf93bdd932f03d7
SQL_ID	2cea509ba0e3065c09c1efe4c77e392a
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	3
####### Next Cycle #######
### Expectation - Replication lag goes away. The system should stop throttling insert query but still throttle delete query. Expect warnings from delete queries ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
set @@global.debug= '-d,dbug.simulate_lag_above_start_throttle_threshold';
set @@global.debug= '+d,dbug.simulate_lag_below_end_throttle_threshold';
insert into t values(4);
delete from t where a = 3;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
SQL_ID	1586ffa412d4a296baf93bdd932f03d7
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	4
####### Next Cycle #######
### Expectation - Replication lag goes away. The system should release the delete query now and stop throttling it. Expect warnings count to not increase ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
insert into t values(5);
delete from t where a = 4;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	4
####### Reset #######
TRUNCATE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
SET @@GLOBAL.WRITE_THROTTLE_MONITOR_CYCLES=1;
flush statistics;
set @@global.debug= '-d,dbug.simulate_lag_below_end_throttle_threshold';
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
####################################################
### Test 5: Monitored entities are dynamically updated if 
### a new potential culprit is found
####################################################
SET @@GLOBAL.WRITE_STATS_COUNT=10;
SET @@GLOBAL.WRITE_THROTTLE_MONITOR_CYCLES=1;
insert into t values(1);
insert into t values(2);
insert into t values(3);
insert into t values(4);
insert into t values(5);
insert into t values(6);
insert into t values(7);
delete from t where a = 6;
delete from t where a = 7;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	324
CLIENT	99914b932bd37a50b983c5e7c90ae93b	324
SHARD	test	324
SQL_ID	1586ffa412d4a296baf93bdd932f03d7	72
SQL_ID	2cea509ba0e3065c09c1efe4c77e392a	252
####### Next Cycle #######
### Expectation - There is replication lag. The system should identify insert query sql_id as the culprit and start monitoring it. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
set @@global.debug= '+d,dbug.simulate_lag_above_start_throttle_threshold';
insert into t values(6);
delete from t where a = 1;
delete from t where a = 2;
delete from t where a = 3;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	144
CLIENT	99914b932bd37a50b983c5e7c90ae93b	144
SHARD	test	144
SQL_ID	1586ffa412d4a296baf93bdd932f03d7	108
SQL_ID	2cea509ba0e3065c09c1efe4c77e392a	36
####### Next Cycle #######
### Expectation - Replication lag still persists but in the last cycle the system should identify delete query as the culprit and update the sql_id to be monitored. Should not throttle it yet. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
insert into t values(6);
delete from t where a = 4;
delete from t where a = 5;
delete from t where a = 6;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	149
CLIENT	99914b932bd37a50b983c5e7c90ae93b	149
SHARD	test	149
SQL_ID	1586ffa412d4a296baf93bdd932f03d7	113
SQL_ID	2cea509ba0e3065c09c1efe4c77e392a	36
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
####### Next Cycle #######
### Expectation - Replication lag still persists. The system should identify delete query as the culprit and throttle it. Expect warnings. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
insert into t values(1);
delete from t where a = 1;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
SQL_ID	1586ffa412d4a296baf93bdd932f03d7
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	72
CLIENT	99914b932bd37a50b983c5e7c90ae93b	72
SHARD	test	72
SQL_ID	1586ffa412d4a296baf93bdd932f03d7	36
SQL_ID	2cea509ba0e3065c09c1efe4c77e392a	36
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	1
####### Reset #######
TRUNCATE t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
flush statistics;
set @@global.debug= '-d,dbug.simulate_lag_above_start_throttle_threshold';
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
####################################################
### Test 6: Auto throttle start & stop based on client
####################################################
SET @@GLOBAL.WRITE_STATS_COUNT=10;
SET @@GLOBAL.WRITE_THROTTLE_MONITOR_CYCLES=0;
create database test1;
create table test1.t(a int) engine=innodb;
insert into test.t values(2);
delete from test.t where a = 2;
use test1;
insert into test1.t values(2);
delete from test1.t where a = 2;
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	144
CLIENT	99914b932bd37a50b983c5e7c90ae93b	144
SHARD	test1	72
SHARD	test	72
SQL_ID	725b9fef2a54aea58bb80fe31af1cb88	36
SQL_ID	494bb2dc69dd407b05c40cde52aabbaf	36
SQL_ID	a55a8f3e636afbb0ca6168a0e024ee84	36
SQL_ID	5a2a9251c1b582bd13192a8685dd6006	36
####### Next Cycle #######
### Expectation - There is replication lag. Based on the write stats, there is no clear sql_id or shard as the culprit. Should identify client_id as the culprit and throttle it. ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
set @@global.debug= '+d,dbug.simulate_lag_above_start_throttle_threshold';
insert into test1.t values(2);
delete from test1.t where a = 2;
insert into test.t values(2);
delete from test1.t where a = 2;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
CLIENT	99914b932bd37a50b983c5e7c90ae93b
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	4
####### Reset #######
use test;
TRUNCATE test.t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
SET @@GLOBAL.WRITE_THROTTLE_MONITOR_CYCLES=1;
drop database test1;
flush statistics;
set @@global.debug= '-d,dbug.simulate_lag_above_start_throttle_threshold';
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
####################################################
### Test 7: No throttling if WRITE_AUTO_THROTTLE_FREQUENCY = 0
####################################################
SET @@GLOBAL.WRITE_STATS_COUNT=10;
SET @@GLOBAL.WRITE_THROTTLE_MONITOR_CYCLES=0;
SET @@GLOBAL.WRITE_AUTO_THROTTLE_FREQUENCY=0;
create database test1;
create table test1.t(a int) engine=innodb;
insert into test.t values(2);
delete from test.t where a = 2;
use test1;
insert into test1.t values(2);
delete from test1.t where a = 2;
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	144
CLIENT	99914b932bd37a50b983c5e7c90ae93b	144
SHARD	test1	72
SHARD	test	72
SQL_ID	725b9fef2a54aea58bb80fe31af1cb88	36
SQL_ID	494bb2dc69dd407b05c40cde52aabbaf	36
SQL_ID	a55a8f3e636afbb0ca6168a0e024ee84	36
SQL_ID	5a2a9251c1b582bd13192a8685dd6006	36
####### Next Cycle #######
### Expectation - There is replication lag but WRITE_AUTO_THROTTLE_FREQUENCY is set to 0. The system should not throttle any entity. No warnings ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
set @@global.debug= '+d,dbug.simulate_lag_above_start_throttle_threshold';
insert into test1.t values(2);
delete from test1.t where a = 2;
insert into test.t values(2);
delete from test1.t where a = 2;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
####### Reset #######
use test;
TRUNCATE test.t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
SET @@GLOBAL.WRITE_THROTTLE_MONITOR_CYCLES=1;
SET @@GLOBAL.WRITE_AUTO_THROTTLE_FREQUENCY=3;
drop database test1;
flush statistics;
set @@global.debug= '-d,dbug.simulate_lag_above_start_throttle_threshold';
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
####################################################
### Test 8: Auto throttle throws error if write_control_level=ERROR
####################################################
SET @@GLOBAL.WRITE_STATS_COUNT=10;
SET @@GLOBAL.WRITE_THROTTLE_MONITOR_CYCLES=0;
SET @@GLOBAL.WRITE_CONTROL_LEVEL=ERROR;
create database test1;
create table test1.t(a int) engine=innodb;
insert into test.t values(2);
delete from test.t where a = 2;
use test1;
insert into test1.t values(2);
delete from test1.t where a = 2;
select type, value, write_data_bytes from information_schema.write_statistics where timestamp = (select max(timestamp) from information_schema.write_statistics);
type	value	write_data_bytes
USER	root	144
CLIENT	99914b932bd37a50b983c5e7c90ae93b	144
SHARD	test1	72
SHARD	test	72
SQL_ID	725b9fef2a54aea58bb80fe31af1cb88	36
SQL_ID	494bb2dc69dd407b05c40cde52aabbaf	36
SQL_ID	a55a8f3e636afbb0ca6168a0e024ee84	36
SQL_ID	5a2a9251c1b582bd13192a8685dd6006	36
####### Next Cycle #######
### Expectation - There is replication lag. The client should be identified as the entity to be throttled ###
### Should throw erros when WRITE_CONTROL_LEVEL is set to ERROR but should only throw warnings when it is set to WARN ###
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
set @@global.debug= '+d,dbug.simulate_lag_above_start_throttle_threshold';
insert into test1.t values(2);
ERROR HY000: Exceeded write workload limit. Try again later
delete from test1.t where a = 2;
ERROR HY000: Exceeded write workload limit. Try again later
SET @@GLOBAL.WRITE_CONTROL_LEVEL=WARN;
insert into test.t values(2);
delete from test1.t where a = 2;
select type, value from information_schema.write_throttling_rules where mode = 'AUTO';
type	value
CLIENT	99914b932bd37a50b983c5e7c90ae93b
select error_code, error_name, errors_total from information_schema.ERROR_STATISTICS where error_code = 50092;
error_code	error_name	errors_total
50092	ER_WRITE_QUERY_THROTTLED	4
####### Reset #######
use test;
TRUNCATE test.t;
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
SET @@GLOBAL.WRITE_THROTTLE_MONITOR_CYCLES=1;
drop database test1;
flush statistics;
set @@global.debug= '-d,dbug.simulate_lag_above_start_throttle_threshold';
select sleep(@wat_freq);
sleep(@wat_freq)
0
select sleep(@ws_freq - unix_timestamp()%@ws_freq);
sleep(@ws_freq - unix_timestamp()%@ws_freq)
0
####################################################
### Test End: Full Reset
####################################################
SET @@GLOBAL.WRITE_STATS_FREQUENCY=0;
DROP TABLE t;
SET @@GLOBAL.SQL_STATS_CONTROL="OFF_HARD";
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_AUTO_THROTTLE_FREQUENCY=0;
SET @@GLOBAL.WRITE_STATS_FREQUENCY=0;
SET @@GLOBAL.WRITE_THROTTLE_PATTERNS='OFF';
SET @@GLOBAL.WRITE_THROTTLE_LAG_PCT_MIN_SECONDARIES=100;
SET @@GLOBAL.WRITE_START_THROTTLE_LAG_MILLISECONDS=86400000;
SET @@GLOBAL.WRITE_STOP_THROTTLE_LAG_MILLISECONDS=86400000;
SET @@GLOBAL.WRITE_THROTTLE_MIN_RATIO=1000;
SET @@GLOBAL.WRITE_THROTTLE_MONITOR_CYCLES=1000;
SET @@GLOBAL.WRITE_CONTROL_LEVEL=OFF;
include/rpl_end.inc
