#!/usr/bin/env escript

-define(ERCHEF, 'erchef@127.0.0.1').
-define(ERCHEF_COOKIE, 'erchef').
-define(SELF, 'chef-pool-stats@127.0.0.1').
-define(A2B(X), erlang:atom_to_binary(X, utf8)).

check_metrics() ->
    Pools = [sqerl, oc_chef_authz_http, chef_index_http, chef_depsolver],
    Metrics = get_metrics(Pools),
    rpc:call(?ERCHEF,chef_json,encode,[{[{<<"pooler_metrics">>,{Metrics}}]}]).

get_free_members([{_,{_,free,{_,_,_}}} | T], Free, Total) ->
    get_free_members(T, Free+1, Total+1);
get_free_members([{_,{_,_,{_,_,_}}} | T], Free, Total) ->
    get_free_members(T, Free, Total+1);
get_free_members([], Free, Total) ->
    {[{<<"free">>, list_to_binary(integer_to_list(Free))}, {<<"total">>, list_to_binary(integer_to_list(Total))}]}.

get_metrics([H | T]) ->
    PoolMembers = rpc:call(?ERCHEF,pooler,pool_stats, [H]),
    FreeMembers = [{?A2B(H), get_free_members(PoolMembers, 0, 0)}],
    get_metrics(T, FreeMembers);
get_metrics([]) -> ok.
get_metrics([H | T], Metrics) ->
    PoolMembers = rpc:call(?ERCHEF,pooler,pool_stats, [H]),
    FreeMembers = lists:append(Metrics,[{?A2B(H), get_free_members(PoolMembers, 0, 0)}]),
    get_metrics(T, FreeMembers);
get_metrics([], Metrics) -> Metrics.

init_network() ->
    net_kernel:start([?SELF, longnames]),
    erlang:set_cookie(node(), ?ERCHEF_COOKIE),
    pong = net_adm:ping(?ERCHEF).

main(_Args) ->
    init_network(),
    Metrics = check_metrics(),
    io:format("~s~n", [Metrics]).
