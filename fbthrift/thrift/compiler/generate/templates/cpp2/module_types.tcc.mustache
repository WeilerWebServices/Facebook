<%!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%><% > Autogen%>
#pragma once

#include "<%program:include_prefix%><%program:name%>_types.h"

#include <thrift/lib/cpp2/gen/module_types_tcc.h>

<% > module_types_tcc/declare_enums%>
<%^program:tablebased?%>
<% > module_types_tcc/tcc_struct_traits%>
<%/program:tablebased?%>

<%#program:structs%><%!
%><% > common/namespace_cpp2_begin%>

<%#program:tablebased?%>
namespace __fbthrift_struct_info {
extern const ::apache::thrift::detail::StructInfoN<<%struct:fields_size%>> <%struct:name%>;
} // namespace __fbthrift_struct_info
<%/program:tablebased?%>

<%^struct:union?%>
<% > module_types_tcc/deserialize_struct%>

<% > module_types_tcc/serialize_struct%>
<%/struct:union?%>
<%#struct:union?%>
<% > module_types_tcc/union_setters%>
<% > module_types_tcc/deserialize_union%>

<% > module_types_tcc/serialize_union%>
<%/struct:union?%>

extern template void <%struct:name%>::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t <%struct:name%>::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t <%struct:name%>::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t <%struct:name%>::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void <%struct:name%>::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t <%struct:name%>::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t <%struct:name%>::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t <%struct:name%>::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
<%#program:json?%>
extern template void <%struct:name%>::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
extern template uint32_t <%struct:name%>::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
extern template uint32_t <%struct:name%>::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
extern template uint32_t <%struct:name%>::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
<%/program:json?%>
<%#program:nimble?%>
extern template void <%struct:name%>::readNoXfer<>(apache::thrift::NimbleProtocolReader*);
extern template uint32_t <%struct:name%>::write<>(apache::thrift::NimbleProtocolWriter*) const;
extern template uint32_t <%struct:name%>::serializedSize<>(apache::thrift::NimbleProtocolWriter const*) const;
extern template uint32_t <%struct:name%>::serializedSizeZC<>(apache::thrift::NimbleProtocolWriter const*) const;
<%/program:nimble?%>

<% > common/namespace_cpp2_end%>

<%/program:structs%><%!

%><%#program:tablebased?%>
namespace apache {
namespace thrift {
namespace detail {
<%#program:structs%>
template <>
struct TypeToInfo<
    ::apache::thrift::type_class::<%#struct:union?%>variant<%/struct:union?%><%^struct:union?%>structure<%/struct:union?%>,
    <% > common/namespace_cpp2 %><%struct:name%>> {
  static const ::apache::thrift::detail::TypeInfo typeInfo;
};
<%/program:structs%>
<%#program:enums%>
  template <>
    struct TypeToInfo<
        ::apache::thrift::type_class::enumeration,
        <% > common/namespace_cpp2%><%enum:name%>> {
    static const ::apache::thrift::detail::TypeInfo typeInfo;
  };
<%/program:enums%>
}}} // namespace apache::thrift::detail
<%/program:tablebased?%>
