/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Definitions of release tasks.
// In order to upload jars to maven repository run:
// $ ./gradlew [-P askForPasswords=true] uploadArchives
// "-P askForPasswords" is optional. Including it in the command will force
// gradle to ask you for passwords rather than read them from gradle.properties.
//
// In order to upload jars to local maven repository run:
//$ ./gradlew -P repositoryUrl=file://localhost/ uploadArchives


apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getRepositoryUrl() {
    return findProperty('repositoryUrl') ? property('repositoryUrl') : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getRepositoryUsername() {
    return findProperty('repositoryUsername') ? property('repositoryUsername') : ""
}

def getRepositoryPassword() {
    return findProperty('repositoryPassword') ? property('repositoryPassword') : ""
}

def getPassword(String passwordName) {
    return new String(System.console().readPassword("\nProvide $passwordName:"))
}

if (findProperty('askForPasswords')) {
    ext.'repositoryPassword' = getPassword('repository password');
    ext.'signing.password' = getPassword('signing password');
}

afterEvaluate { project ->
    version = VERSION_NAME
    group = GROUP

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        configuration = configurations.archives
        repositories.mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(url: getRepositoryUrl()) {
                authentication(
                        userName: getRepositoryUsername(),
                        password: getRepositoryPassword())

            }

            pom.project {
                name POM_NAME
                artifactId POM_ARTIFACT_ID
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url 'https://github.com/facebook/TextLayoutBuilder'

                scm {
                    url 'https://github.com/facebook/TextLayoutBuilder.git'
                    connection 'scm:git:https://github.com/facebook/TextLayoutBuilder.git'
                    developerConnection 'scm:git:git@github.com:facebook/TextLayoutBuilder.git'
                }

                licenses {
                    license {
                        name 'Apache-2'
                        url 'https://github.com/facebook/TextLayoutBuilder/blob/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'facebook'
                        name 'Facebook'
                    }
                }
            }
        }
    }
}
