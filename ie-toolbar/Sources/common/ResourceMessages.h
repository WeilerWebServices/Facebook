/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#ifndef RESOURCEMESSAGES_H
#define RESOURCEMESSAGES_H

#include <list>
#include <map>

#include "ViewObserver.h"
#include "../util/StringUtils.h"
#include "../util/PtrUtils.h"

namespace facebook{

class CultureInfo;

/**
 * class ResourceMessages
 *
 * Main class for managing culture messages.
 */
class ResourceMessages {

public:

  typedef std::map<String, CultureInfo*> CultureInfoMap;
  typedef CultureInfoMap::value_type CultureInfoEntry;

public:

  ResourceMessages();

  ~ResourceMessages();

  void setCurrentCulture(const String id);

  /**
   * Set the current culture by index
   * @param index - index of the culture
   */
  static void setCurrentCulture(int index);

  String getCurrentCulture() const;

  /**
   * Get the list of available Cultures in the list of pairs form:
   * each pair is  a culture id and culture name, like en-us <-> English
   *
   * @return list of Cultures
   */
  static std::map<String, String> getCulturesList();

  /**
   * Get the message in the current culture
   * if there is no appropriate culture - default (English) will be set.
   *
   * @param key - message to get
   * @param reload - if need to reload current culture
   * @return message in the current culture or key if there is no such
   */
  static String getMessage(const String key, bool reload = false);

  /**
   * Get text alignment of the current culture
   * @return true if text right aligned, false otherwise
   */
  static bool isTextRightAligned();

  /**
   * static method to get the instance of the language manager
   *
   * @return Language manager
   */
  static ResourceMessages& getInstance();

  /**
   * method for subscribing ui objects for view change events.
   *
   * @param observer - ui object to subscibe
   */
  static void subscribeObserver(ViewObserver *observer);

  /**
   * method for unsubscribing ui objects for view change events.
   *
   * @param observer - ui object to unsubscibe
   */
  static void unsubscribeObserver(ViewObserver *observer);

  /**
   * load the current Culture settings information
   *
   */
  void loadCurrentCulture();

  /**
   * load the cultures from the files
   */
  void load();

  /**
   * update the Culture settings on all subscribed classes
   */
  void notifyObservers(int changeId = 0);

private:

  /**
   * Clear the culture entry
   * @param cultureEntry - entry to clear
   */
  void clearCulture(CultureInfoEntry& cultureEntry);


  /**
   * Gets the culture name by index
   * @param index - index of the culture to get
   * @return culture name or empty string if no such culture
   */
  String getCulture(int index);

  /**
   * clears all the cultures
   */
  void clear();

  /**
   * Get the culture id from the file name
   * The file name should have format message.<culture id>.xml
   *
   * @param fileName - name of the file
   * @return culture id or empty string if the format is incorrect
   */
  static String getCultureName(const String& fileName);


  /**
   * Loads culture from the file and fills all system fields
   *
   * @param searchFolder - folder with files
   * @param fileName - file to load from
   */
  void loadCulture(const String& searchFolder, const String& fileName);

  /**
   * Read the Culture from the file
   * 
   * @param culture - culture to fill with data
   * @param file - culture file name
   * 
   * @return true if culture was read correctly. 
   */
  bool readCulture(CultureInfo& data, const String & file);

  /**
   * Read the default culture from resources
   * 
   * @param culture - read culture
   * @return true if culture was read correctly. 
   */
  bool readDefaultCulture(CultureInfo& data);

  /**
   * save the current Culture settings information
   */
  void saveCurrentCulture();

private:

  CultureInfoMap cultures_;
  CultureInfo * currentCulture_; // just a pointer to current culture, no need to manage
  boost::shared_ptr<CultureInfo> defaultCulture_;
  String currentCultureId_;
  bool isAutoCultureId_;
  bool defaultCultureNeeded_;
  std::list<ViewObserver*> observers_;

};

} // !namespace facebook


#endif // RESOURCEMESSAGES_H
