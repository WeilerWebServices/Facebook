/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "StdAfx.h"
#include "GenericHtmlView.h"

#include <windows.h>

#include <boost/algorithm/string.hpp>
#include <boost/bind.hpp>

#include "UrlUtils.h"

#include "../util/BrowserUtils.h"
#include "../util/ComWrappers.h"
#include "../util/ModuleUtils.h"
#include "../util/ScopeGuard.h"
#include "../util/StringUtils.h"
#include "../util/ResourceUtils.h"


namespace facebook{

using boost::bind;

GenericHtmlView::GenericHtmlView() {
  actionHandler_ =  defaultHandleHtmlLoad;
  uiFlags_ = 0;
}

GenericHtmlView::GenericHtmlView(ActionHandler actionHandler) {
  actionHandler_ = (actionHandler);
  uiFlags_ = 0;
}

GenericHtmlView::~GenericHtmlView() {

}

void GenericHtmlView::addUIShowingFlags(UINT flags) {
  uiFlags_ |= flags;
}

bool GenericHtmlView::defaultHandleHtmlLoad(LPCTSTR url, BOOL* cancelAction, CWnd* notifyWindow) {
  UNREFERENCED_PARAMETER(url);
  UNREFERENCED_PARAMETER(cancelAction);
  UNREFERENCED_PARAMETER(notifyWindow);
  return false;
}

void GenericHtmlView::DoDataExchange(CDataExchange* pDX) {
  CHtmlView::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(GenericHtmlView, CHtmlView)
END_MESSAGE_MAP()

#ifdef _DEBUG
void GenericHtmlView::AssertValid() const{
  CHtmlView::AssertValid();
}

void GenericHtmlView::Dump(CDumpContext& dc) const{
  CHtmlView::Dump(dc);
}
#endif //_DEBUG

void GenericHtmlView::OnBeforeNavigate2(LPCTSTR lpszURL,
                                        DWORD nFlags, LPCTSTR lpszTargetFrameName,  
                                        CByteArray& baPostedData,
                                        LPCTSTR lpszHeaders, 
                                        BOOL* pbCancel) {
  if ((actionHandler_ != NULL) && 
    (actionHandler_)(lpszURL, pbCancel, this)) {
    return;
  }
  CHtmlView::OnBeforeNavigate2(lpszURL, nFlags,
    lpszTargetFrameName, baPostedData, lpszHeaders, pbCancel);
}

HRESULT GenericHtmlView::OnGetHostInfo(DOCHOSTUIINFO *pInfo) {
  pInfo->cbSize = sizeof(DOCHOSTUIINFO);
  pInfo->dwFlags |= uiFlags_;
  pInfo->dwDoubleClick = DOCHOSTUIDBLCLK_DEFAULT;
  return S_OK;
}



CComPtr<IHTMLDocument2> GenericHtmlView::getHTMLDoc() {

  if (htmlDoc_ != NULL) {
    return htmlDoc_;
  }

  //initialize the document
  if (!GetHtmlDocument()) {
     CHtmlView::Navigate2(_T("about:blank"));
  }

  HRESULT hr = GetHtmlDocument()->QueryInterface(IID_IHTMLDocument, 
    (void**)&htmlDoc_);

  if (FAILED(hr)) {
    htmlDoc_= NULL;    
  }

  return htmlDoc_;
}

HRESULT GenericHtmlView::OnShowContextMenu(DWORD dwID, LPPOINT ppt,
                          LPUNKNOWN pcmdtReserved, 
                          LPDISPATCH pdispReserved) {
 UNREFERENCED_PARAMETER(dwID);
 UNREFERENCED_PARAMETER(ppt);
 UNREFERENCED_PARAMETER(pcmdtReserved);
 UNREFERENCED_PARAMETER(pdispReserved);

#ifdef DEBUG
  //show default context menu in debug mode to check the html source
  return S_FALSE;
#else
  // do not show context menu in release
  return S_OK;
#endif
}


void GenericHtmlView::writeHtml(CComPtr<IHTMLDocument2>  htmlDoc, String htmlData) {
  // write result into the HTML document
  SAFEARRAY* psa = SafeArrayCreateVector(VT_VARIANT, 0, 1);
  if (psa == NULL) {
    throw std::exception("failed to allocate safe array vector");
  }

  ScopeGuard psaGuard(boost::bind(SafeArrayDestroyWrapper() , psa));

  //handle html content before its written to the document
  // replace variables in content to provide access to styles and scripts
  processContent(htmlData);


  VARIANT *param;
  bstr_t bsData = (LPCTSTR)htmlData.c_str();
  const HRESULT accessDataResult = SafeArrayAccessData(psa, (LPVOID*)&param);
  if (FAILED(accessDataResult)) {
    _com_raise_error(accessDataResult);
  }
  param->vt = VT_BSTR;
  param->bstrVal =(BSTR)bsData;
  const HRESULT writeDataResult = htmlDoc->write(psa);
  if (FAILED(writeDataResult)) {
    _com_raise_error(writeDataResult);
  }
  const HRESULT closeDockResult = htmlDoc->close();
  if (FAILED(closeDockResult)) {
    _com_raise_error(closeDockResult);
  }
}

}


