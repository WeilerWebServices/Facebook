/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/

#ifndef CLIENTSERVICE_H
#define CLIENTSERVICE_H

#include "FBClientService_i.h"
#include "IFBClientServiceEvents_CP.h"

#if defined(_WIN32_WCE) && !defined(_CE_DCOM) && !defined(_CE_ALLOW_SINGLE_THREADED_OBJECTS_IN_MTA)
#error "Single-threaded COM objects are not properly supported on Windows CE platform, such as the Windows Mobile platforms that do not include full DCOM support. Define _CE_ALLOW_SINGLE_THREADED_OBJECTS_IN_MTA to force ATL to support creating single-thread COM object's and allow use of it's single-threaded COM object implementations. The threading model in your rgs file was set to 'Free' as that is the only threading model supported in non DCOM Windows CE platforms."
#endif

#include <memory>


namespace facebook{

class ClientServiceImpl;

class ATL_NO_VTABLE ClientService :
      public ATL::CComObjectRootEx<ATL::CComSingleThreadModel>,
      public ATL::CComCoClass<ClientService, &CLSID_FBClientService>,
      public ISupportErrorInfo,
      public ATL::IConnectionPointContainerImpl<ClientService>,
      public ATL::IDispatchImpl<IFBClientService, &IID_IFBClientService, &LIBID_FBClientServiceLib, 1, 0>,
      public CProxyIFBClientServiceEvents<ClientService> {

// Types

private:

  typedef std::auto_ptr<ClientServiceImpl> ClientServiceImplPtr;

// Construction

public:

  ClientService();

// Destruction

public:

  ~ClientService();

// ATL declarations

public:

  DECLARE_CLASSFACTORY_SINGLETON(ClientService)

  DECLARE_REGISTRY_RESOURCEID(IDR_FBCLIENTSERVICE1)

  DECLARE_NOT_AGGREGATABLE(ClientService)

  BEGIN_COM_MAP(ClientService)
   COM_INTERFACE_ENTRY(IFBClientService)
   COM_INTERFACE_ENTRY(IDispatch)
   COM_INTERFACE_ENTRY(ISupportErrorInfo)
   COM_INTERFACE_ENTRY(IConnectionPointContainer)
  END_COM_MAP()

  BEGIN_CONNECTION_POINT_MAP(ClientService)
   CONNECTION_POINT_ENTRY(__uuidof(IFBClientServiceEvents))
  END_CONNECTION_POINT_MAP()

  DECLARE_PROTECT_FINAL_CONSTRUCT()

// Interfaces implementations

public:

  STDMETHOD(InterfaceSupportsErrorInfo)(REFIID riid);

  STDMETHOD(getPokesCount)(ULONG* pokesCount);

  STDMETHOD(getMessagesCount)(ULONG* messagesCount);

  STDMETHOD(getRequestsCount)(ULONG* requestsCount);

  STDMETHOD(getEventsCount)(ULONG* eventsCount);

  STDMETHOD(getGroupsInvsCount)(ULONG* groupsInvsCount);

  STDMETHOD(getUser)(FBUserData* userData);

  STDMETHOD(getFriends)(SAFEARRAY** usersData);

  STDMETHOD(login)(ULONG parentWindow);

  STDMETHOD(logout)(void);

  STDMETHOD(isLoggedIn)(USHORT* loggedIn);

  STDMETHOD(setStatus)(BSTR statusMessage);

  STDMETHOD(canChangeStatus)(USHORT* allowed);

  STDMETHOD(updateView)(ULONG changeid);

  STDMETHOD(setSession)(BSTR session);

// Methods

public:

  HRESULT FinalConstruct();

  void FinalRelease();

  void fireUpdates();

// Members

private:

   ClientServiceImplPtr service_;

};

OBJECT_ENTRY_AUTO(__uuidof(FBClientService), ClientService)

}


#endif // CLIENTSERVICE_H
