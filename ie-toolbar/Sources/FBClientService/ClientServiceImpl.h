/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#ifndef CLIENTSERVICEIMPL_H
#define CLIENTSERVICEIMPL_H

#include <map>
#include <set>

#include <boost/noncopyable.hpp>

#include "../common/DataChangeEvents.h"

#include "../data/UserData.h"
#include "../data/SessionInfo.h"

#include "../util/StringUtils.h"


namespace facebook{

class ClientService;
class CommunicationServiceLoop;
class CommunicationService;

/**
 *
 * class ClientServiceImpl
 *
 * This class is used to provide simple synchronized 
 * access to facebook's data. It hides from client code all 
 * the details how this data were received 
 */
class ClientServiceImpl : private boost::noncopyable{
   // typedefs
public:

   // construction/destruction
public:
  ClientServiceImpl();
  ~ClientServiceImpl();

   // public methods
public:

  // {@ login/logout group
  void login(ULONG parentWindow);
  void logout();
  bool isLoggedIn() const;
  // @}

  /**
   * @return  - ID of logged in user(if any)
   */
  String getUserID() const;

  /**
   * @return  - information about logged in(current)
   *            user
   * @see  UserData
   */
  UserData getLoggedInUser() const;

  /**
   * @return  - number of pokes
   */
  size_t getPokesCount() const;

  /**
   * @return  - number messages, received
   *            by current user
   */
  size_t getMessageCount() const;

  /**
   * @return  - number of active requests
   */
  size_t getRequestsCount() const;

  /**
   * @return  - of events current user is 
   *            invited 
   */
  size_t getEventsCount() const;

  /**
   * @return  - number of invitations to facebooks groups 
   */
  size_t getGroupsInvsCount() const;

  /**
   * @return  - all the friends of current user
   */
  FriendsList getFriends() const;

  /**
   * change current user status 
   *
   * @param - new value of status
   */
  void setStatus(const String& statusString);

  /**
   * change current user session 
   *
   * @param - new value of session
   */
  void setSession(const String& session);

  bool canChangeStatus() const;

  /**
   * Subscribes window on specified event 
   * @see DataChangeEvents enum
   *
   * @param hWnd - handle of window being subscribed
   * @param event - event identifier. 
   */
  void subscribe(const HWND hWnd, const DataChangeEvents event);

  /**
   * Unsubscribes window from event receiving 
   * @see DataChangeEvents enum
   *
   * @param hWnd - handle of window being subscribed
   * @param event - event identifier. 
   */
  void unsubscribe(const HWND hWnd, const DataChangeEvents event);


  void FireUpdates(ClientService* clientService);

  void updateView(ULONG changeId);

private:

  bool storeSessionInfo(const SessionInfo& sessionInfo);

  bool restoreSessionInfo(SessionInfo& sessionInfo);

  void cleanupSessionInfo();

  void startStoredSession();

  void startSession(CommunicationService* communicator);

  void cleanUpCollectedData();

   
private:
  CommunicationServiceLoop* serviceLoop_; // the main guy who talks with facebook 
  bool initialUpdate_;
};

}


#endif // CLIENTSERVICE_H
