/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "StdAfx.h"
#include "./RequestsComposer.h"

#include <boost/algorithm/string/join.hpp>


namespace facebook{
using namespace std;

/* see http://wiki.developers.facebook.com/index.php/API
 * for details 
 */

XMLRequest RequestsComposer::composeCreateTokenRequest() {
   static const String createTokenAPI = _T("facebook.auth.createToken");
   const XMLRequest::RequestParams emptyParams;
   return XMLRequest(createTokenAPI, emptyParams, XMLRequest::GET, 
         XMLRequest::CREATE_TOKEN);
}

XMLRequest RequestsComposer::composeCreateSessionRequest(const String& token) {
   static const String getSessionAPIName = _T("facebook.auth.getSession");
   XMLRequest::RequestParams params;
   params.insert(make_pair(_T("auth_token"), token ));
   return XMLRequest(getSessionAPIName, params,  XMLRequest::GET, 
         XMLRequest::CREATE_SESSION);
}

XMLRequest RequestsComposer::composeGetFriendsListRequest(const String& loggedInUserID) {
   static const String fqlQueryApiName = _T("facebook.fql.query");

   StringStream ssQuery;
   ssQuery << _T("SELECT uid, name, status, pic_small, ") 
      << _T("pic_square, wall_count, notes_count, ")
      << _T("profile_update_time ")
      << _T(" FROM user WHERE uid = ") << loggedInUserID 
      << _T(" OR uid IN (SELECT uid2 FROM friend WHERE uid1 = ") 
      << loggedInUserID << ");";

   XMLRequest::RequestParams params;
   params.insert(make_pair(_T("query"), ssQuery.str()));

   return XMLRequest(fqlQueryApiName, params,  XMLRequest::GET, 
         XMLRequest::GET_FRIENDS);
}

XMLRequest RequestsComposer::composeGetNotificationsRequest() {
   static const String notificationsGetApiName = _T("facebook.notifications.get");
   XMLRequest::RequestParams emptyParams;
   return XMLRequest(notificationsGetApiName, emptyParams,  
         XMLRequest::GET, XMLRequest::GET_NOTIFICATIONS);
}

XMLRequest RequestsComposer::composeSetStatusRequest(const String& statusString) {
   static const String setStatusApiName = _T("facebook.users.setStatus");
   XMLRequest::RequestParams requestParams;
   requestParams.insert(make_pair(_T("status"), statusString));

   static const String TRUE_VALUE = _T("1");
   if (statusString.empty()) {
      requestParams.insert(make_pair(_T("status_includes_verb"), TRUE_VALUE ));
   }
   else {
      requestParams.insert(make_pair(_T("status_includes_verb"), TRUE_VALUE ));
   }

   return XMLRequest(setStatusApiName, requestParams, 
      XMLRequest::POST, XMLRequest::SET_STATUS);
}


XMLRequest RequestsComposer::composeHasPermissionRequest(const String& operation) {
   static const String setStatusApiName = _T("facebook.users.hasAppPermission");
   XMLRequest::RequestParams requestParams;
   requestParams.insert(make_pair(_T("ext_perm"), operation));

   return XMLRequest(setStatusApiName, requestParams, 
      XMLRequest::POST, XMLRequest::HAS_PERMISSION);

}

XMLRequest RequestsComposer::composeGetAlbumsRequest(const String& loggedInUserID, 
      const size_t interval) {
   static const String fqlQueryApiName = _T("facebook.fql.query");
   
   StringStream ssQuery;

   const bool initialQuery = interval == 0 ;

   ssQuery << "SELECT aid, owner, modified, size ";
   if (!initialQuery) {
      ssQuery << " , name, link ";
   }
       
    ssQuery << " FROM album  WHERE owner IN "
            " (SELECT uid2 FROM friend WHERE uid1 = " << loggedInUserID <<
            " ) AND size > 0 ";
   
   if (!initialQuery)
      ssQuery << " AND modified > (now() - "  << interval  << " ) ";
   
   XMLRequest::RequestParams params;
   params.insert(make_pair(_T("query"), ssQuery.str()));

   return XMLRequest(fqlQueryApiName, params, 
      XMLRequest::POST, XMLRequest::GET_ALBUMS);
}

XMLRequest RequestsComposer::composeGetUsersInfoRequest(const UsersIDs& usersIDs) {
   static const String getUsersApiName = _T("facebook.users.getInfo");
   const String uids = boost::join(usersIDs, ",");
   const String fields = _T("name,status,pic_small,pic_square,wall_count, notes_count,profile_update_time");

   XMLRequest::RequestParams params;
   params.insert(make_pair(_T("uids"), uids));
   params.insert(make_pair(_T("fields"), fields));

   return XMLRequest(getUsersApiName, params,
      XMLRequest::GET, XMLRequest::USERS_GETINFO);
}

} //!namespace facebook
