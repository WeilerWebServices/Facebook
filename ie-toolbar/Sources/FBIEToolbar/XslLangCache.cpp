/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "StdAfx.h"

#include "XslLangCache.h"

#include <boost/algorithm/string/replace.hpp>

#include "../common/ResourceMessages.h"
#include "../util/ResourceUtils.h"

namespace facebook {

XslLangCache* XslLangCache::instance_ = NULL;

XslLangCache::XslLangCache() {
}

XslLangCache::~XslLangCache() {
  if(instance_) {
    delete instance_;
  }
}

XslLangCache* XslLangCache::Instance() {
  if(!instance_) {
    instance_ = new XslLangCache();
  }

  return instance_;
}

String XslLangCache::getXsl(int resId, String resType) {
  using boost::replace_all;
  String result;
  bool isCached = false;
  for (XslLangIterator it = xslCache_.begin(); it != xslCache_.end(); ++it) {
    if ((*it).first == resId) {
      isCached = true;
      result = (*it).second;
      break;
    }
  }

  if (!isCached) {
    String xsl;
    if (!resType.compare(_T("HTML"))) {
      xsl = loadStringFromResources(resId, RT_HTML);
    } else {
      xsl = loadStringFromResources(resId, resType.c_str());
    }

    //String xsl = loadStringFromResources(resId, resType.c_str());

    replace_all(xsl, _T("[Monday]"), ResourceMessages::getMessage(kMonday)); 
    replace_all(xsl, _T("[Tuesday]"), ResourceMessages::getMessage(kTuesday));
    replace_all(xsl, _T("[Wednesday]"), ResourceMessages::getMessage(kWednesday));
    replace_all(xsl, _T("[Thursday]"), ResourceMessages::getMessage(kThursday));
    replace_all(xsl, _T("[Friday]"), ResourceMessages::getMessage(kFriday));
    replace_all(xsl, _T("[Saturday]"), ResourceMessages::getMessage(kSaturday));
    replace_all(xsl, _T("[Sunday]"), ResourceMessages::getMessage(kSunday));
    replace_all(xsl, _T("[Yesterday]"), ResourceMessages::getMessage(kYesterday));
    replace_all(xsl, _T("[YesterdaySmall]"), ResourceMessages::getMessage(kYesterdaySmall));
    replace_all(xsl, _T("[Today]"), ResourceMessages::getMessage(kToday));
    replace_all(xsl, _T("[TodaySmall]"), ResourceMessages::getMessage(kTodaySmall));

    replace_all(xsl, _T("[AboutWeekAgoSmall]"), ResourceMessages::getMessage(kAboutWeekAgoSmall));
    replace_all(xsl, _T("[AboutTwoWeekAgoSmall]"), ResourceMessages::getMessage(kAboutTwoWeekAgoSmall));
    replace_all(xsl, _T("[AboutWeekAgoParam]"), ResourceMessages::getMessage(kAboutWeekAgoParam));
    replace_all(xsl, _T("[AboutMonthAgoSmall]"), ResourceMessages::getMessage(kAboutMonthAgoSmall));
    replace_all(xsl, _T("[DateTimeFormat]"), ResourceMessages::getMessage(kDateTimeFormat));
    replace_all(xsl, _T("[WeekDateTimeFormat]"), ResourceMessages::getMessage(kWeekDateTimeFormat));
    replace_all(xsl, _T("[ProfileTimeFormat]"), ResourceMessages::getMessage(kProfileTimeFormat));
    replace_all(xsl, _T("[ProfileWeekTimeFormat]"), ResourceMessages::getMessage(kProfileWeekTimeFormat));

    xslCache_[resId] = xsl;
    result = xsl;
  }

  return result;
}

void XslLangCache::update() {
  xslCache_.clear();
}

} // namespace facebook