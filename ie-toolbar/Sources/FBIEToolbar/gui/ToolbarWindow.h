/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/

#ifndef ToolbarWindow_H
#define ToolbarWindow_H

#include <boost/noncopyable.hpp>

#include "../../util/GdiDefs.h"
#include "../../util/StringUtils.h"

class CWnd;

namespace facebook{

/**
 *
 * class ToolbarWindow
 *
 * This class implements windows toolbar control
 * with Facebook Toolbar for FF look&feel capabilities
 * 
 */

class ToolbarWindow : public CToolBar, private boost::noncopyable{

  // Types

private:

  typedef ToolbarWindow ClassType;
  typedef CToolBar BaseType;

  // MFC Declarations

private:

  DECLARE_DYNAMIC(ToolbarWindow)

  DECLARE_MESSAGE_MAP()

  // Construction

public:

  ToolbarWindow();

  // Destruction

public:

  ~ToolbarWindow();

  // Window messages handlers

protected:

  /** 
   * This handler is called at window creation
   * 
   * @param createStruct a structure  contains information about 
   * the CWnd object being created
   * @see http://msdn.microsoft.com/en-us/library/aa249871(VS.60).aspx
   */
  afx_msg int OnCreate(LPCREATESTRUCT createStructure);

  /** 
   * This handler is called at window destroing
   * 
   * @see http://msdn.microsoft.com/en-us/library/aa249871(VS.60).aspx
   */
  afx_msg void OnDestroy();

  /**
   * Standard handler of changing size
   * 
   * @param type a type of resizing requested
   * @param newWidth a new width of client area
   * @param newHeigth height of the client area
   * @see http://msdn.microsoft.com/en-us/library/aa249952(VS.60).aspx
   */
  afx_msg void OnSize(UINT type, int newWidth, int newHeight);

  afx_msg void OnSetFocus(CWnd* const oldWindow);

  afx_msg void OnKillFocus(CWnd* const newWindow);

  afx_msg void OnNmSetFocus(UINT id, NMHDR* messageHdr, LRESULT* lResult);

  afx_msg void OnNmKillFocus(UINT id, NMHDR* messageHdr, LRESULT* lResult);

  afx_msg void OnToolBarMessage(NMHDR* messageHdr, LRESULT* lResult);

  /** 
   * This handler is called at escape button pressing
   * 
   * @see http://msdn.microsoft.com/en-us/library/aa249871(VS.60).aspx
   */
  afx_msg void OnClose();
  // Methods
public:

  /**
   * Creates the toolbar window class
   *
   * @param parentWindow  - parent window where too place toolbar
   */
  void create(CWnd& parentWindow);

  /**
   * Append button to the toolbar
   *
   * @param buttonDefn  - button properties structure
   * @return index of added button 
   */
  size_t appendButton(const TBBUTTON& buttonDefn);

  /**
   * Append separator to the toolbar
   *
   * @return index of added separator
   */
  size_t appendSeparator();

  /**
   * Append fixed spacer of the specified width
   *
   * @param space  - size of the spacer to add
   * @return index of added spacer
   */
  size_t appendFixedSpacer(const size_t space);

  /**
   * Append dynamic spacer
   *
   * @return index of added spacer
   */
  size_t appendDynamicSpacer();

  /**
   * REfresh the children items positions
   *
   */
  void refreshLayout();

  // methods to work with toolbar items
public:
   int getItemCommand(const size_t itemIndex) const;
   void setItemCommand(const size_t itemIndex, const int commandId);

   int getItemImage(const size_t itemIndex) const;
   void setItemImage(const size_t itemIndex, const int imageId);
   void setItemImageToNone(const size_t itemIndex);

   BYTE getItemState(const size_t itemIndex) const;
   void setItemState(const size_t itemIndex, const BYTE state);

   BYTE getItemStyle(const size_t itemIndex) const;
   void setItemStyle(const size_t itemIndex, const BYTE style);

   /**
    * Check id the item is hiden
    *
    * @param  itemIndex index of the item
    * @return true if item is hiden
    */
   bool isItemHidden(const size_t itemIndex) const;

   /**
    * Show the child item
    *
    * @param  itemIndex index of the item
    *
    */
   void showItem(const size_t itemIndex);
   /**
    * Hide the child item
    *
    * @param  itemIndex index of the item
    *
    */
   void hideItem(const size_t itemIndex);

   /**
    * Set the test of the child item
    *
    * @param  itemIndex index of the item
    * @param  itemText - text to set
    *
    */
   void setItemText(const size_t itemIndex, const String& itemText);

   ImageListPtr getImageList() const;
   void setImageList(const ImageListPtr imageList);


   ImageListPtr getHotImageList() const;
   void setHotImageList(const ImageListPtr imageList);

   /**
    * Gets the rect of the child item
    *
    * @param  itemIndex index of the item
    * @return  corresponding rect
    *
    */
   CRect getItemRect(const size_t itemIndex) const;

   /**
    *  update the menu item caption to current culture
    *
    * @param  menu - menu to update
    * @param  item - item position in the menu to get the caption
    */
   static void updateItem(CMenu * menu, int item);

private:

  /**
   * Set the width of the child item
   *
   * @param  itemIndex index of the item
   * @param  newWidth - width to set
   *
   */
  void setItemWidth(const size_t itemIndex, const size_t newWidth);

  /**
   * Gets the rect of the child control item
   *
   * @param  itemIndex index of the item
   * @return  corresponding rect
   *
   */
  CRect getControlItemRect(const size_t itemIndex) const;

  /**
   * Calculates rect used for items between startIndex and endIndex
   *
   * @param  startIndex first item index
   * @param  endIndex last item index
   *
   */
  CRect getItemsRect(const size_t startIndex = 0,
    const size_t endIndex = 0) const;

  /**
   * Change the size of the toolbar
   *
   * @param  toolbarWidth new toolbar size
   */
  void resize(const size_t toolbarWidth);

  /**
   * Change children items position according to the new toolbar size
   *
   * @param  toolbarWidth new toolbar size
   */
  void rearrangeItems(const size_t toolbarWidth);

  /**
   * Change the dynamic spacer size according to the new toolbar size
   *
   * @param  toolbarWidth new toolbar size
   */
  bool resizeDynamicSpacers(const size_t toolbarWidth);

  /**
   * Change children controls items position according to the new toolbar size
   *
   */
  void rearrangeControlItems();

  /**
   * Check whether we are inside the size changing handler
   *
   * @returntrue if yes
   */
  bool isPendingRefreshLayout() const;

  /**
   * get the Horizontal padding
   *
   * @return Horizontal padding
   */
  size_t getHorizontalPadding() const;

  /**
   * get the Vertical padding
   *
   * @return Vertical padding
   */
  size_t getVerticalPadding() const;

// Members

private:

  static const size_t invalidItemIndex_;

  size_t dynamicSpacerIndex_;

  ImageListPtr buttonsImageList_;
  ImageListPtr hotButtonsImageList_;
};


} // !namespace facebook


#endif // ToolbarWindow_H
