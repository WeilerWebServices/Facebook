/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/

#include "StdAfx.h"
#include "UserStatusEdit.h"

#include "IEToolbar.h"

#include "../system/RuntimeContext.h"
#include "../system/UserDataObserver.h"

#include "../../util/Error.h"
#include "../../common/UrlUtils.h"

#include "../../util/BrowserUtils.h"
#include "../../common/ResourceMessages.h"
#include "../../util/HtmlUtils.h"
#include "../../util/PtrUtils.h"
#include "../../util/WndUtils.h"


namespace facebook{

// ---------------------------------------------------------------------
// class UserStatusEdit
// ---------------------------------------------------------------------

IMPLEMENT_DYNAMIC(UserStatusEdit, ToolbarEdit)

BEGIN_MESSAGE_MAP(UserStatusEdit, ToolbarEdit)
   ON_WM_CREATE()
   ON_WM_KEYUP()
   ON_WM_KILLFOCUS()
END_MESSAGE_MAP()

UserStatusEdit::UserStatusEdit() {
}

UserStatusEdit::~UserStatusEdit() {
}

int UserStatusEdit::OnCreate(LPCREATESTRUCT createStructure) {
  if (BaseType::OnCreate(createStructure) == -1) {
    return -1;
  }
  return 0;
}

void UserStatusEdit::OnKeyUp(UINT character, UINT repeatCount, UINT flags) {
  BaseType::OnKeyUp(character, repeatCount, flags);
  if (VK_RETURN == character) {
    saveUserStatus();
  }
  if (VK_ESCAPE == character) {
    String status = UserDataObserver::getInstance().
      getLoggedInUser(false).getStatusMessage();
    if (status.empty()) {
      enterDefaultText();
    } else {
      setText(status);
    }
    // selete the whole text
    SetSel(0, -1);
  }
}

void UserStatusEdit::OnKillFocus(CWnd* newWindow) {
  saveUserStatus();
  BaseType::OnKillFocus(newWindow);
}

void UserStatusEdit::loadUserStatus() {
   const String status = UserDataObserver::getInstance().
     getLoggedInUser().
     getStatusMessage();
   
   setText(decodeCharsHtmlCode(status));
}

void UserStatusEdit::saveUserStatus() {
  String status = getEnteredText();
  if (status == promptText_ || status == defaultText_) {
    // if there remains default text - remove the status
    status.clear();
  }
  if (UserDataObserver::getInstance().
    getLoggedInUser(false).getStatusMessage() == status) {
    // don't save it if  nothing was changed
    return;
  }

  if (UserDataObserver::getInstance().canChangeStatus()) {
      UserDataObserver::getInstance().
        setStatus(encodeCharsHtmlCode(getEnteredText()));
  } else {
     authorizeSetStatus();
  }
}

void UserStatusEdit::authorizeSetStatus() {
  IWebBrowser2Ptr browser = RuntimeContext::getBrowser();
  BrowserUtils::navigate(browser, kAutorizeUrl);
}

void UserStatusEdit::updateView(int changeId)  {
  UNREFERENCED_PARAMETER(changeId);
    if (!GetSafeHwnd()) {
    // do not update if we are empty
    return;
  }
  if (getEnteredText() == defaultText_) {
    setDefaultText(ResourceMessages::getMessage(kToolbarStatusPrefix));
    enterDefaultText();
  } else if (getEnteredText() == promptText_) {
    setDefaultText(ResourceMessages::getMessage(kToolbarStatusPrefix));
    setPromptText(ResourceMessages::getMessage(kToolbarSetYourStatus));
    setText(_T(""));
  } else {
    setDefaultText(ResourceMessages::getMessage(kToolbarStatusPrefix));
    setPromptText(ResourceMessages::getMessage(kToolbarSetYourStatus));
    setText(getEnteredText());
  }
}

}  // !namespace facebook