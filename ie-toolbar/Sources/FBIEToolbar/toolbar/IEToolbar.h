/**
 * Facebook Internet Explorer Toolbar Software License 
 * Copyright (c) 2009 Facebook, Inc. 
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (which, together with any graphical images included with such
 * software, are collectively referred to below as the "Software") to (a) use,
 * reproduce, display, distribute, execute, and transmit the Software, (b)
 * prepare derivative works of the Software (excluding any graphical images
 * included with the Software, which may not be modified or altered), and (c)
 * permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.  
 *
 * Facebook, Inc. retains ownership of the Software and all associated
 * intellectual property rights.  All rights not expressly granted in this
 * license are reserved by Facebook, Inc.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * @author Edward Yablonsky (eyablonsky@lohika.com)
 */ 

#ifndef IETOOLBAR_H
#define IETOOLBAR_H

#include "FriendsSearchEdit.h"
#include "UserStatusEdit.h"


#include <boost/noncopyable.hpp>

#include "../gui/ToolbarWindow.h"
#include "../system/ClientServiceObserver.h"

#include "../../util/GdiDefs.h"
#include "../../common/ViewObserver.h"

namespace facebook {


/**
 * class IEToolbar
 *
 * Implements interfaces required for toolbars integrated into IE.
 */
class IEToolbar :
  public IDeskBand,
  public IInputObject,
  public IObjectWithSite,
  public IPersistStream,
  public IContextMenu,
  public ViewObserver,
  private boost::noncopyable {

// Types

public:

  enum ToolbarState{
    TS_USER_LOGGED_IN,
    TS_USER_LOGGED_OUT
  };

typedef IEToolbar ClassType;

// Construction

public:

  /**
   * Default constructor
   */
  IEToolbar();

// Destruction

public:

  /**
   * Destructor
   */
  ~IEToolbar();

// Interfaces implementation

private:

  // IUnknown methods

  /**
   * Returns interface for interface identifier supported by this object.
   *
   * @param interfaceId an input identifier of interface. (by value)
   * @param interfacePtr an output interface. (by pointer-to-pointer)
   * @return COM error code.
   */
  STDMETHOD (QueryInterface)(REFIID interfaceId, LPVOID* interfacePtr);

  /**
   * Increments reference count for this object.
   *
   * @return value of the new reference count.
   */
  STDMETHOD_ (DWORD, AddRef)();

  /**
   * Decrements reference count for this object.
   *
   * @return the resulting value of the reference count.
   */
  STDMETHOD_ (DWORD, Release)();

  // IOleWindow methods

  /**
   * Gets the window handle to window embedded into IE.
   *
   * @param windowHandle an output window handle. (by pointer)
   * @return COM error code.
   */
  STDMETHOD (GetWindow)(HWND* windowHandle);

  /**
   * Enters into or exits from help mode.
   *
   * @param enterMode boolean input, TRUE if help mode should be entered,
   *                  FALSE if it should be exited. (by value)
   * @return COM error code.
   */
  STDMETHOD (ContextSensitiveHelp)(BOOL enterMode);

  // IDockingWindow methods

  /**
   * Instructs the docking window object to show or hide itself.
   *
   * @param show an input boolean with value TRUE if the docking window object
   *             should show its window. FALSE if the docking window object
   *             should hide its window.
   * @return COM error code.
   */
  STDMETHOD (ShowDW)(BOOL show);

  /**
   * Notifies the docking window object that it is about to be removed from the
   * frame.
   *
   * @param reserved should always be zero.
   * @return COM error code.
   */
  STDMETHOD (CloseDW)(DWORD reserved);

  /**
   * Notifies the docking window object that the frame's border space has
   * changed.
   *
   * @param border a RECT structure that contains the frame's available border
   *               space. (by pointer)
   * @param site an input IUnknown interface of toolbar's site. (by pointer)
   * @param reserved should always be zero.
   * @return COM error code.
   */
  STDMETHOD (ResizeBorderDW)(LPCRECT border, IUnknown* site, BOOL reserved);

  // IDeskBand methods

  /**
   * Gets state information for a band object.
   *
   * @param bandId an input identifier of the band, assigned by the container.
   *               (by value)
   * @param viewMode an input view mode of the band object. (by value)
   * @param bandInfo an output DESKBANDINFO structure that receives the band
   *                 information for the object. (by pointer)
   * @return COM error code.
   */
  STDMETHOD (GetBandInfo)(DWORD bandId, DWORD viewMode, DESKBANDINFO* bandInfo);

  // IInputObject methods
  STDMETHOD (UIActivateIO)(BOOL, LPMSG);
  STDMETHOD (HasFocusIO)(void);
  STDMETHOD (TranslateAcceleratorIO)(LPMSG);

  // IObjectWithSite methods
  STDMETHOD (SetSite)(IUnknown* site);
  STDMETHOD (GetSite)(REFIID, LPVOID*);

  // IPersistStream methods
  STDMETHOD (GetClassID)(LPCLSID);
  STDMETHOD (IsDirty)(void);
  STDMETHOD (Load)(LPSTREAM);
  STDMETHOD (Save)(LPSTREAM, BOOL);
  STDMETHOD (GetSizeMax)(ULARGE_INTEGER*);

  // IContextMenu methods
  STDMETHOD (QueryContextMenu)(HMENU, UINT, UINT, UINT, UINT);
  STDMETHOD (InvokeCommand)(CMINVOKECOMMANDINFO*);
  STDMETHOD (GetCommandString)(UINT_PTR, UINT, UINT*, LPSTR, UINT);

// Accessors

public:

  /**
   * Returns IUnknown interface for this object.
   *
   * @return pointer to interface.
   */
  IUnknownPtr getControlUnknown();

  /**
   * Returns IServiceProvider interface for site object on which this resides.
   *
   * @return pointer to interface.
   */
  IServiceProviderPtr getServiceProvider() const;

  /**
   * Returns web browser interface.
   *
   * @return interface pointer.
   */
  IWebBrowser2Ptr getWebBrowser() const;

  /**
   * Returns window handle for MFC-based toolbar.
   *
   * @return window handle.
   */
  HWND getToolbarWindow() const;

// Methods

public:

  /**
   * Notifies toolbar about that side bar is open.
   */
  void sidebarIsOpen();

  /**
   * Notifies toolbar about that side bar is closed.
   */
  void sidebarIsClosed();

  /**
   * Posts message to MFC-based toolbar window.
   *
   * @param code an input message code. (by value)
   * @param wParam an input value used in message handler. (by value)
   * @param lParam an input value used in message handler. (by value)
   * @return nothing
   */
  void postMessage(DWORD code, WPARAM wParam, LPARAM lParam);

  /**
   * Returns logged-in/logged-out state of toolbar
   *
   * @return enumerator value indicates current state.
   */
  ToolbarState getState() const { return toolbarState_; }

  virtual void updateView(int changeId = 0);

private:

  /**
   * Set share button size depend on the text
   */
  void resizeShareButton();

  /**
   * Helper method. Does a bunch of actions need to be done
   * when explorer ask object to dock object to site.
   *
   * @param site an  input pointer to IUnknown interface of site. (by value)
   */
  void dockToSite(IUnknownPtr site);

  /**
   * Bind members to site and do other initialization required during docking to
   * the site.
   *
   * @param site an  input pointer to IUnknown interface of site. (by value)
   */
  void acquireSite(IUnknownPtr site);

  /**
   * Unbind members from site.
   */
  void releaseSite();

  /**
   * Bind members to site window. Do subclassing.
   *
   * @param site an  input pointer to IUnknown interface of site. (by value)
   */
  void acquireSiteWindow(IUnknownPtr site);

  /**
   * Unbind members from site window. Do unsubclassing.
   */
  void releaseSiteWindow();

  /**
   * Helper method. Does a bunch of actions need to be done
   * when explorer ask object to undock from site.
   */
  void undockFromSite();

  /**
   * Does subclassing of specified window to receive all its messges.
   *
   * @param window an input window handle. (by value)
   */
  void subclassWindow(const HWND window);

  /**
   * Does unsubclassing of specified window.
   *
   * @param window an input window handle. (by value)
   */
  void unsubclassWindow(const HWND window);

  /**
   * Creates MFC-based toolbar window.
   */
  void createToolbarWindow();

  /**
   * Initializes and sets up regular images for toolbar's buttons.
   */
  void setupToolbarImages();

  /**
   * Initializes and sets up hot(under mouse pointer) images for toolbar's
   * buttons.
   */
  void setupToolbarHotImages();

  /**
   * Initializes pop-up menu from resources.
   *
   * @param menu an MFC-based menu object. (by reference)
   */
  void loadQuickLinksMenu(CMenu& menu);


  /**
   * Builds languages submenu for the specified menu
   *
   * @param menu an MFC-based menu object. (by reference) to add a language submenu
   */
  void buildLanguagesSubMenu(CMenu& menu);

  /**
   * Helper function which creates MFC-based image list object.
   *
   * @param bitmap an input bitmap object. (by reference)
   * @return shared pointer of newly created image list object.
   */
  ImageListPtr createButtonsImageList(CBitmap& bitmap) const;

  /**
   * Creates and initializes all elements on MFC-based toolbar window.
   */
  void createToolbarItems();

  /**
   * Places sidebar button button to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendSidebarButton();

  /**
   * Places friends search edit control to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendSearchEdit();

  /**
   * Places quick links button to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendQuickLinksButton();

  /**
   * Places home button to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendHomeButton();

  /**
   * Places pokes button to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendPokesButton();

  /**
   * Places requests button to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendRequestsButton();

  /**
   * Places messages button to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendMesssagesButton();

  /**
   * Places event invitations button to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendEventInvsButton();

  /**
   * Places group invitations to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendGroupInvsButton();

  /**
   * Places share page button to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendShareButton();

  /**
   * Places user profile button to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendProfileButton();

  /**
   * Places user status edit control to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendStatusEdit();

  /**
   * Places login/logout to MFC-based toolbar window.
   *
   * @return index of added element.
   */
  size_t appendLoginButton();

  /**
   * Destroy MFC-based toolbar window.
   */
  void destroyToolbarWindow();

  /**
   * System procedure to Process all the messages that are sent to the Toolbar window
   *
   */
  bool processSubclassedWindowMessage(const HWND subclassedWindow,
      const UINT message, const WPARAM wParam, const LPARAM lParam,
      LRESULT& lResult);

  /**
   * System procedure to Process all the messages that are sent to the Toolbar window
   *
   */
  bool processSiteWindowMessage(const UINT message, const WPARAM wParam,
      const LPARAM lParam, LRESULT& lResult);

  /**
   * Updated the chield item data
   *
   * @param itemIndex - item to update
   * @param value - show (1) or hide (0) item
   */
  void setCountItemValue(const size_t itemIndex, const size_t value);

  /**
   * Updated the chield item view and data
   *
   * @param itemIndex - item to update
   */
  void invalidateCountItem(const size_t itemIndex);

  /**
   * Sets the number of Pokes
   *
   * @param pokesCount - number to set
   */
  void setPokesCount(const size_t pokesCount);

  /**
   * Sets the number of Requests
   *
   * @param requestsCount - number to set
   */
  void setRequestsCount(const size_t requestsCount);

  /**
   * Sets the number of Messages
   *
   * @param messagesCount - number to set
   */
  void setMessagesCount(const size_t messagesCount);

  /**
   * Sets the number of Event invitations
   *
   * @param eventInvsCount - number to set
   */
  void setEventInvsCount(const size_t eventInvsCount);

  /**
   * Sets the number of group invitations
   *
   * @param groupInvsCount - number to set
   */
  void setGroupInvsCount(const size_t groupInvsCount);

  /**
   * Sets the tex ton the progile button
   *
   * @param profileName - text to set
   */
  void setProfileName(const String& profileName);

  /**
   * Sets the text in the status editbox
   *
   * @param statusText - text to set
   */
  void setStatusText(const String& statusText);

  /**
   * Perform al needed changes to go into loged in state
   *
   */
  void loggedIn();

  /**
   * Perform al needed changes to go into logged out state
   *
   */
  void loggedOut();

  /**
   * Load all the data at toolbar showing
   *
   */
  void retrieveInitialData();

  /**
   * Update the toolbar view
   *
   */
  void invalidateData();

  /**
   * Navigate drowser to specified url
   *
   * @param targetUrl - url to navigate to
   */
  void doNavigate(const String& targetUrl) const;

  bool onCommand(const size_t command);

  bool onNotify(const size_t controlId, const NMHDR& messageInfo,
      LRESULT& lResult);

  bool onNeedToolTipText(NMTTDISPINFOW& messageInfo, LRESULT& lResult);

  bool onToolbarNotify(const NMTOOLBAR& messageInfo, LRESULT& lResult);

  bool onToolbarSetFocus(const NMTOOLBAR& messageInfo, LRESULT& lResult);

  bool onToolbarKillFocus(const NMTOOLBAR& messageInfo, LRESULT& lResult);

  /**
   * Handle the Toolbar dropdown opening
   *
   * @param messageInfo - system meesage informastion
   * @param lResult - returns the operation result
   * @return true
   */
  bool onToolbarDropdown(const NMTOOLBAR& messageInfo, LRESULT& lResult);

  /**
   * Handle the Toolbar special drawing 
   *
   * @param messageInfo - system meesage informastion
   * @param lResult - returns the operation result
   * @return true
   */
  bool onToolbarCustomDraw(const NMTBCUSTOMDRAW& messageInfo, LRESULT& lResult);

  /**
   * Handle the Share button showing
   *
   * @param messageInfo - system meesage informastion
   * @param lResult - returns the operation result
   * @return true
   */
  bool onShareButtonDraw(const NMTBCUSTOMDRAW& messageInfo, LRESULT& lResult);

  /**
   * Generate image for share button
   *
   * @param isHot - generate hot image or not
   */
  BitmapPtr generateShareBitmap(bool isHot);

  /**
   * Handle the quicklinks dropdown showing
   *
   * @param messageInfo - system meesage informastion
   * @param lResult - returns the operation result
   * @return true
   */
  bool onQuickLinksDropdown(const NMTOOLBAR& messageInfo, LRESULT& lResult);

  /**
   * Handle open Sidebar command
   *
   * @return true
   */
  bool onSidebarCmd();

  /**
   * Handle Share command
   *
   * @return true
   */
  bool onShareCmd();

  /**
   * Handle Log in command
   *
   * @return true
   */
  bool onLoginCmd();

  /**
   * Handle Logout command
   *
   * @return true
   */
  bool onLogoutCmd();

  /**
   * Handle the open Toolbar Settings command 
   *
   * @return true
   */
  bool onQuickLinksToolbarSettingsCmd();

  static LRESULT CALLBACK subclassProcThunk(HWND window, UINT message,
      WPARAM wParam, LPARAM lParam, UINT_PTR subclassId, DWORD_PTR refData);

  /**
   * Handle the language changing command
   *
   * @param command - index of the language
   * @return true if changed
   */
  bool onLanguageChanged(size_t command);

// Overrides

private:

  /**
   * Update the status according to the update message
   *
   * @param dataId - type of the update
   */
  void dataUpdated(unsigned long dataId);

// Members

private:

  static const CSize minSize_; // Minimal size of toolbar in IE.

  static const CSize maxSize_; // Maximal size of toolbar in IE.

  static const size_t invalidItemIndex_; /** Used as invalid value for members
                                         which hold indexes of toolbar's
                                         elements. */

  const size_t searchEditWidth_; /** Width in pixels of edit control for
                                 friends search. */

  const size_t statusEditWidth_; /** Width in pixels of edit control for
                                 friends search. */

  const COLORREF cueBannerColor_; // Color of cue banners in edit controls.

  DWORD objRefsCount_; /** Instances counter used in implementation of
                       IUnknown interface */

  IInputObjectSite* site_;  /** Holds site object retrieved from IE on which
                            this toolbar resides. */

  CWnd siteWindow_; // Holds MFC object represents window of toolbar's site.

  DWORD bandId_; // Holds identifier of toolbar band retrieved from IE.

  DWORD viewMode_; // Holds view mode of toolbar band retrieved from IE.

  ToolbarWindow toolbarWindow_; /** MFC-based toolbar window represents UI
                                elements (buttons, edits, etc.). */

  ToolbarState toolbarState_; // Holds logged-in/logged-out state.

  FriendsSearchEdit searchEdit_; // MFC-based edit control for friends search.

  UserStatusEdit statusEdit_; // MFC-based edit control for user status.

  size_t sidebarButtonIndex_; /** Holds index of toolbar element for sidebar
                              button. */

  size_t searchEditIndex_; /** Holds index of toolbar element for friends
                           search edit control. */

  size_t quickLinksButtonIndex_; /** Holds index of toolbar element for quick
                                 links button. */

  size_t homeButtonIndex_; // Holds index of toolbar element for home button.

  size_t pokesButtonIndex_; // Holds index of toolbar element for pokes button.

  size_t requestsButtonIndex_; /** Holds index of toolbar element for requests
                               button. */

  size_t messagesButtonIndex_; /** Holds index of toolbar element for messages
                               button. */

  size_t eventInvsButtonIndex_; /** Holds index of toolbar element for events
                                invitations button. */

  size_t groupInvsButtonIndex_; /** Holds index of toolbar element for groups
                                invitations button. */

  size_t shareButtonIndex_; /** Holds index of toolbar element for share
                            page content button. */

  size_t profileButtonIndex_; /** Holds index of toolbar element for user
                              profile button. */

  size_t statusEditIndex_; /** Holds index of toolbar element for user status
                           edit control. */

  size_t loginButtonIndex_; /** Holds index of toolbar element for login/logout
                            button. */
  size_t loginSpacerIndex_;

  BitmapPtr shareButtonBitmap_; // Bitmap of regular image for share button.

  BitmapPtr shareHotButtonBitmap_; /** Bitmap of hot image
                                   (under mouse pointer) for share button. */
  CRITICAL_SECTION critialSection_; // Holds critical section for an update view

  CComPtr<IClassFactory> httpFactory_;
  CComPtr<IClassFactory> httpsFactory_;
};


} // namespace facebook


#endif // IETOOLBAR_H
