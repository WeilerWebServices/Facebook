/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#include "StdAfx.h"
#include "FriendsSearchEdit.h"
#include "FriendsSearchPopup.h"


#include "../Resource.h"


#include "../system/UserDataObserver.h"
#include "../system/RuntimeContext.h"

#include "../../common/ToolbarMessages.h"
#include "../../common/UrlUtils.h"

#include "../../util/BrowserUtils.h"
#include "../../util/GdiUtils.h"
#include "../../util/HtmlUtils.h"
#include "../../util/Error.h"
#include "../../common/ResourceMessages.h"


namespace facebook{

// ---------------------------------------------------------------------
// class FriendsSearchEdit
// ---------------------------------------------------------------------

IMPLEMENT_DYNAMIC(FriendsSearchEdit, ToolbarEdit)

BEGIN_MESSAGE_MAP(FriendsSearchEdit, ToolbarEdit)
   ON_WM_SETFOCUS()
   ON_WM_KILLFOCUS()
   ON_WM_CREATE()
   ON_WM_KEYUP() 
   ON_MESSAGE(TBM_FOCUS_CHANGED, onFocusChange)  
   ON_MESSAGE(TBM_DATA_CHANGED, onDataChanged)  
   ON_WM_CONTEXTMENU()
   
END_MESSAGE_MAP()


FriendsSearchEdit::FriendsSearchEdit()
  :friendsSearchPopup_(NULL),
  disablePopup_(false),
  manualyDisabled_(false),
  focusMoved_(false) {
    mouseHook_ = SetWindowsHookEx(WH_MOUSE, (HOOKPROC)&MouseProc,  
                 AfxGetApp()->m_hInstance, 0);
}


FriendsSearchEdit::~FriendsSearchEdit() {
  freeFriendsSearchPopup();
  UnhookWindowsHookEx(mouseHook_);
}

void FriendsSearchEdit::OnSetFocus(CWnd* wnd) {
  BaseType::OnSetFocus(wnd);
  if (!RuntimeContext::isSidebarOpened()) {
    if (disablePopup_) {
      return;
    }
    if (!friendsSearchPopup_) {
  
      showFriendsSearchPopup();
    } else {
      // if we click in search again - close the popup
      freeFriendsSearchPopup();
      disablePopup_ = true;
    }
  } else {
    freeFriendsSearchPopup();
  }
}

void FriendsSearchEdit::OnContextMenu(CWnd* window, CPoint point) {
  UNREFERENCED_PARAMETER(window);
  UNREFERENCED_PARAMETER(point);
}

void FriendsSearchEdit::OnKillFocus(CWnd* wnd) {
  TRACE(_T("FriendsSearchEdit::OnKillFocus\n"));
   if (!wnd) {
     TRACE(_T("FriendsSearchEdit::OnKillFocus kill all\n"));
     disablePopup_ = false;
     if (!RuntimeContext::isSidebarOpened() && friendsSearchPopup_) {
       freeFriendsSearchPopup();
     }
     BaseType::OnKillFocus(wnd);
     return;
   }
   if (RuntimeContext::isSidebarOpened()) {
     disablePopup_ = false;
     freeFriendsSearchPopup();
     BaseType::OnKillFocus(wnd);
   } else {
     TRACE(_T("FriendsSearchEdit::OnKillFocus friendsSearchPopup_\n"));
     if(!friendsSearchPopup_ || 
        friendsSearchPopup_ && 
        !friendsSearchPopup_->isWindowOurDescendant(wnd->GetSafeHwnd())) { 
       disablePopup_ = false;
       freeFriendsSearchPopup();
       BaseType::OnKillFocus(wnd);
     }
   }
}

int FriendsSearchEdit::OnCreate(LPCREATESTRUCT createStructure) {
  if (BaseType::OnCreate(createStructure) == -1)
    return -1;

  SetLimitText(50);
  const BitmapPtr symbolBitmap = loadBitmap(IDB_SMALL_LOGO);

  setSymbolBitmap(symbolBitmap);
  return 0;
}

void FriendsSearchEdit::CreatePopupFilter() {
  friendsSearchPopup_ = getFriendsSearchPopup();

  CRect rect;
  GetWindowRect(&rect);
  CPoint pt(rect.left + 20, rect.bottom);
  if(friendsSearchPopup_ && !friendsSearchPopup_->GetSafeHwnd()) {
     friendsSearchPopup_->Create(GetParent(), 
     pt, NULL);
  }
}

void FriendsSearchEdit::OnKeyUp(UINT character, UINT repeatCount, UINT flags) {
  BaseType::OnKeyUp(character, repeatCount, flags);
  String filterText;
  filterText = encodeCharEntities(getEnteredText());

  HWND target = NULL;
  if (RuntimeContext::isSidebarOpened()) {
    target = RuntimeContext::getSidebarHwnd();
  } else if (!disablePopup_ && friendsSearchPopup_) {
    target = friendsSearchPopup_->GetSafeHwnd();
  }
  // handle system characters
  switch(character) {
    case VK_TAB:
      break;
    case VK_ESCAPE:
      KillFocus();
      ::SetFocus(GetParent()->GetSafeHwnd());
    case VK_MENU:
      if (!RuntimeContext::isSidebarOpened()) {
        freeFriendsSearchPopup();
        manualyDisabled_ = true;
      }
      break;
    case VK_RETURN:
      if (focusMoved_ && target) {
        ::SendMessage(target, TBM_CUSTOM_KEY_PRESSED, character, (LPARAM)target);
      } else {
        focusMoved_ = false;
        // if not logged in - ask login
        if (!UserDataObserver::getInstance().isLoggedIn(false)) {
          UserDataObserver::getInstance().login();
        } else if (filterText == _T("")) {
          if (!RuntimeContext::isSidebarOpened() && 
              RuntimeContext::getToolbar()) {
            // open the sidebar
            RuntimeContext::getToolbar()->postMessage(WM_COMMAND, 
                IDC_TBI_SIDEBAR, 0);
          }
        } else {
          // manually search if there is something to
          IWebBrowser2Ptr browser = RuntimeContext::getBrowser();
          BrowserUtils::navigate(browser, buildSearchURL(filterText));
        }
        // close the popup
        if (!RuntimeContext::isSidebarOpened()) {
          freeFriendsSearchPopup();
          manualyDisabled_ = true;
        }
      }
      break;
    case VK_UP:
    case VK_DOWN:
      focusMoved_ = true;
      if (target) {
        ::SendMessage(target, TBM_CUSTOM_KEY_PRESSED, character, (LPARAM)target);
        break;
      }
    default:
      if (RuntimeContext::isSidebarOpened()) {
        // receiver will delete allocated string
        HWND sideBarHwnd = RuntimeContext::getSidebarHwnd();
        applySearchFilter(sideBarHwnd, filterText);
      } else if (!disablePopup_) {
        manualyDisabled_ = false;
        showFriendsSearchPopup();
      }
      SetFocus();
  }
}

BOOL FriendsSearchEdit::isEditEmpty() const{
  CString text;

  if (GetSafeHwnd()) {
    GetWindowText(text);
  }

  return text.IsEmpty();
}

BOOL FriendsSearchEdit::isOneSymbol() const{
  CString text;

  if (GetSafeHwnd()) {
    GetWindowText(text);
  }

  return text.GetLength() == 1;
}

void FriendsSearchEdit::applySearchFilter(const HWND subject,
      const String& filterText) {
  focusMoved_ = false;
  if (!subject) {
      return;
  }
  // Callee is responsible to free allocated string

  String* filterToSend = new String(filterText);

  ::SendMessage(subject, TBM_FILTER_CHANGED, WPARAM(0), LPARAM(filterToSend));
}

FriendsSearchPopup * FriendsSearchEdit::getFriendsSearchPopup() {
  if(!friendsSearchPopup_) {
    friendsSearchPopup_ = new FriendsSearchPopup(this->GetSafeHwnd());
    
  }
  return friendsSearchPopup_;
}

void FriendsSearchEdit::freeFriendsSearchPopup() {
  if (friendsSearchPopup_) {
    focusMoved_ = false;
    FriendsSearchPopup * temporaryPointer = friendsSearchPopup_;
    friendsSearchPopup_ = NULL;
    // need to have friendsSearchPopup_ null before its delete 
    // due to some chield <-> parent focus messages
    delete temporaryPointer;
  }
}

void FriendsSearchEdit::showFriendsSearchPopup() {
  String filterText = encodeCharEntities(getEnteredText());
  CreatePopupFilter();
  friendsSearchPopup_->changeFilter(filterText);
}

LRESULT CALLBACK FriendsSearchEdit::MouseProc( int nCode, WPARAM wParam, LPARAM lParam) {
  if (nCode < 0) {
    return CallNextHookEx(NULL, nCode, wParam, lParam);
  }

  if (WM_LBUTTONDOWN == wParam || WM_NCLBUTTONDOWN == wParam) {
    
    CWnd *friendPopup = CWnd::FindWindow(NULL, sFriendsSearchPopupWindowName.c_str());
    const MOUSEHOOKSTRUCT& hookInfo = *LPMOUSEHOOKSTRUCT(lParam);
    if (friendPopup) {
      friendPopup->PostMessage(TBM_FOCUS_CHANGED, hookInfo.pt.x, hookInfo.pt.y);
    }
  }
  return CallNextHookEx(NULL, nCode, wParam, lParam);
}

LRESULT FriendsSearchEdit::onFocusChange(WPARAM wParam, LPARAM lParam) {
  CRect windowRect;
  GetClientRect(windowRect);
  ClientToScreen(windowRect);

  if (windowRect.PtInRect(CPoint(wParam, lParam))) {
    SetFocus();
    // if we click in search again - close the popup
    disablePopup_ = true;
    freeFriendsSearchPopup();
    return 0;
  }
  disablePopup_ = true;
  freeFriendsSearchPopup();
  disablePopup_ = false;
  //KillFocus();
  GetParent()->SetFocus();
  return 0;
}

LRESULT FriendsSearchEdit::onDataChanged(WPARAM wParam, LPARAM lParam) {
  UNREFERENCED_PARAMETER(wParam);
  UNREFERENCED_PARAMETER(lParam);

  if (friendsSearchPopup_) {
    showFriendsSearchPopup();
  }
  return 0;
}

void FriendsSearchEdit::updateView(int changeId) {
  UNREFERENCED_PARAMETER(changeId);
  if (!GetSafeHwnd()) {
    // do not update if we are empty
    return;
  }
  if (getEnteredText() == promptText_) {
    enterDefaultText();
  }
  setPromptText(ResourceMessages::getMessage(kToolbarSearchFacebook));
  setText(getEnteredText());
}

}