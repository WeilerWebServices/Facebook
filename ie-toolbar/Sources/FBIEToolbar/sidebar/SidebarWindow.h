/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#ifndef SIDEBARWINDOW_H
#define SIDEBARWINDOW_H

#include "SidebarHtmlView.h"
#include "../gui/ToolbarWindow.h"

#include "../../data/UserData.h"
#include "../../common/ViewObserver.h"

namespace facebook {

/**
 * class SidebarWindow
 *
 * Implements sidebar look&feel
 * Sidebar contains:
 * friends list html view
 * buttons toolbar with 'Settings' and 'Sort' buttons
 */

class SidebarWindow : public CWnd, public ViewObserver{
  DECLARE_DYNAMIC(SidebarWindow)

public:
  /*** trivial constructor */
  SidebarWindow();

  virtual ~SidebarWindow();

// Methods
public:
  /**
   * Does all the necessary actions to apply given sort
   * mode to displayed friends list. The normal way how 
   * sort mode be changed is using 'Sort' dropdown 
   * button
   *
   * @param sortMode - value representing sort mode 
   * @see SortMode
   */
  void changeSortMode(const SortMode& sortMode);

  /**
   * Does all the necessary actions to apply given
   * filter to displayed friends list. Usually filter
   * can be changed by typing something in toolbar edit
   *
   * @param filter a string containing filter word(s)
   */
  void changeFilter(const String& filter);

  /**
   * Switches window to the logged out state. 
   * In this state friends view displays captions
   * saying 'Login from toolbar to see the friends
   * list' or something like this
   */
  void loggedOut();

  /**
   * Switches window to the 'loading friends list...' state
   */
  void loading();

  /**
   * Friends list is available. Now window 
   * can display it
   */
  void loaded(const FriendsList& friendsList);

  /**
   *  Refresh the sidebar state
   *  @param loggedIn current logged in state
   */
  void refresh(bool loggedIn);

  virtual void updateView(int changeId = 0);

  // Message handlers
protected:

  DECLARE_MESSAGE_MAP()

  /**
   * Shows 'Toolbar settings' dialog
   */
  afx_msg void onSettingsButtonClicked();

  // @{ sort mode change handlers
  afx_msg void onSortByName();

  afx_msg void onSortByLastUpdateTime();

  afx_msg void onSortByStatusUpdateTime();

  afx_msg void onSortByProfileUpdateTime();
  // @}

  /**
   * Handler for the TBM_FILTER_CHANGED message. TBM_FILTER_CHANGED
   * sent by search edit, when user types something
   */
  afx_msg LRESULT onChangeFriendsFilter(WPARAM wParam, LPARAM lParam);

  /**
   * Handle the Toolbar special drawing 
   *
   * @param messageInfo - system meesage informastion
   * @param lResult - returns the operation result
   * @return true
   */
  bool onToolbarCustomDraw(LPNMTBCUSTOMDRAW messageInfo,
                                    LRESULT& lResult);
 
  // overrides
private:

  /**
   * All the notifications messages passed through this method
   * But we are interesting only in TBN_DROPDOWN
   * @see http://msdn.microsoft.com/en-us/library/aa249933(VS.60).aspx
   */
  afx_msg BOOL OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult);


 /**
  * Standard handler of changing size
  * 
  * @param type a type of resizing requested
  * @param newWidth a new width of client area
  * @param newHeigth height of the client area
  * @see http://msdn.microsoft.com/en-us/library/aa249952(VS.60).aspx
  */
  afx_msg void OnSize(UINT type, int newWidth, int newHeight);

 /** 
  * This handler is called at window creation
  * 
  * @param createStruct a structure  contains information about 
  * the CWnd object being created
  * @see http://msdn.microsoft.com/en-us/library/aa249871(VS.60).aspx
  */
  afx_msg int OnCreate(LPCREATESTRUCT createStruct);
 
  /** 
  * This handler is called at window showing/hiding
  * 
  * @param bShow Specifies whether a window is being shown. 
  * It is TRUE if the window is being shown; it is FALSE if the window is being hidden.
  *
  * @param nStatus Specifies the status of the window being shown.
  *
  * @see http://msdn.microsoft.com/en-us/library/aa249951(VS.60).aspx
  */
  afx_msg void OnShowWindow(BOOL bShow, UINT nStatus);

private:

  /**
   * Handler for the TBM_DATA_CHANGED. yields reloading of 
   * friends list
   */
  LRESULT onDataChanged(WPARAM wParam, LPARAM lParam);

  /**
   * Handler for navigation key. Checks whether pressed
   * key one of the following 'down', 'up', 'pgDown, 'pgUp', 
   * 'home', 'end' and translates it to appropriate call of 
   * We use this tricky technique because ie window(
   * friends view) for unknown reason doesn't want to process
   * keyboard inside sidebar.
   */
  LRESULT onNavigationKeyPressed(WPARAM wParam, LPARAM lParam);

  LRESULT onGetSidebarFocused(WPARAM wParam, LPARAM lParam);

  /**
   * Checks whether specified window is our chield
   *
   * @param descendantCandidate - child candidate to check
   * @return true if yes
   */
  bool isWindowOurDescendant(const HWND descendantCandidate) const;

// Static members
private:
  static const size_t kFriendsListButtonsHeight; /// the height of 'Settings' and 'Sort' buttons 

  static const size_t kFriendsListButtonsTopIdent; /** distance between the bottom of 
                                                   html view and top of the buttons */

  static const size_t kInvalidItemIndex; /** some reasonably big value to indicate invalid 
                                             button index*/
private:

  /**
   * Calculates rectangle available for placing friends list html 
   * view
   *
   * @param clientRect whole client area
   */
  CRect calculateFriendsViewRect(const CRect& clientRect) const;


  /**
   * Calculates rectangle available for placing toolbar
   * containing ('settings' and 'sort' buttons)
   *
   * @param friendsViewRect rectangle allocated for 
   * friends view
   * @param clientRect whole client area
   */
  CRect calculateToolbarRect(const CRect& friendsViewRect, const CRect& clientRect) const;

  /**
   * Allocates and initializes SidebarHtmlView instance
   * @see SidebarHtmlView
   */
  void createFriendsView();

  /**
   * Allocates and initialize toolbar
   * containing ('settings' and 'sort' buttons)
   */
  void createButtonsToolbar();

  /**
   * Part of the buttons toolbar initialization
   * Add 'Settings' buttons to the left of the
   * toolbar
   *
   * @return index of added button 
   */
  const size_t appendSettingsButton();

  /**
   * Part of the buttons toolbar initialization
   * Add 'Sort' drop-down button to the right of 
   * the toolbar button
   * 
   * @return index of added button 
   */
  const size_t appendSortButton(); 

  /** 
   * @return caption need to be displayed depending on
   * chosen sorting criteria
   */
  String getSortButtonText() const;

  /**
   * Simple wrapper over the CMenu::LoadMenu
   */
  void loadSortMenu(CMenu& sortMenu) const;

// members
private:
  SidebarHtmlView* friendsView_; /** holds html view, displaying 
                                 friends list */
  ToolbarWindow settingsSortToolbar_; /** toolbar, contains 
                                      'Settings' and 'Sort' buttons */
  SortMode activeSortMode_; /// current sort mode

  size_t settingsButtonIndex_; // index of the 'Settings'. used to access to button
  size_t sortButtonIndex_; // index of the 'Sort' dropdown button
  CMenu sortMenu_; // Instance of CMenu holds variants of sorting 'name, last updated, etc'
  bool isVisible_; // holds the visibility flag.
};

} // !namespace facebook

#endif

