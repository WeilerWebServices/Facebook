/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/

#ifndef CLIENTSERVICEUTILS_H
#define CLIENTSERVICEUTILS_H

#include <afxmt.h>

#include "ClientServiceEventsSink.h"
#include "../../data/UserData.h"
#include "../../FBClientService/FBClientService_i.h"
#include "../../util/ScopeGuard.h"
#include "../../util/COMWrappers.h"



namespace facebook {

class ClientServiceObserver;

typedef CComObject<ClientServiceEventsSink> ClientServiceEventsSinkObject;
typedef ClientServiceEventsSinkObject* ClientServiceEventsSinkPtr;
typedef CComPtr<IFBClientService> ClientServicePtr;

/**
 * class ClientServiceConnection
 *
 * Manages COM connection with "client service" exe-server. Manages events sinks
 * in thread tolerant manner.
 */
class ClientServiceConnection {

// Types

private:

  typedef std::pair<ClientServicePtr, ClientServiceEventsSinkPtr> ConnectionItem;

  typedef DWORD ThreadId;

  typedef std::map<ThreadId, ConnectionItem> ConnectionItemsMap;

  typedef ConnectionItemsMap::value_type ConnectionEntry;

// Construction

public:

  /**
   * Default constructor
   */
  ClientServiceConnection();

// Destruction

public:

  /**
   * Destructor
   */
  ~ClientServiceConnection();
   
// Methods

public:

  /**
   * Returns client service interface for specified thread.
   *
   * @param threadId an input identifier of thread.
   * @return pointer to IFBClientService interface.
   */
  ClientServicePtr getClientService(const DWORD threadId =
      ::GetCurrentThreadId());

  /**
   * Releases connection to client service for specified thread.
   *
   * @param threadId an input identifier of thread.
   */
  void removeClientService(const DWORD threadId = ::GetCurrentThreadId());

  /**
   * Subscribes observer of client service messages.
   *
   * @param observer an input reference to observer object. (by pointer)
   */
  void subscribeServiceObserver(ClientServiceObserver* observer);

  /**
   * Unsubscribes observer of client service messages.
   *
   * @param observer an input reference to observer object. (by pointer)
   */
  void unsubscribeServiceObserver(ClientServiceObserver* observer);

private:

  ClientServiceEventsSinkPtr getEventsSink();

  ClientServicePtr createClientService();

  ClientServiceEventsSinkPtr createEventsSink();

  ConnectionItem createConnection();

  ClientServicePtr& getService(ConnectionItem& item);

  const ClientServicePtr& getService(const ConnectionItem& item);

  ClientServiceEventsSinkPtr& getEventsSink(ConnectionItem& item);

  const ClientServiceEventsSinkPtr& getEventsSink(const ConnectionItem& item);

  bool hasObservers(const ClientServiceEventsSinkPtr& sink) const;

  /**
   * Checks if there is connections for the specified thread.
   *
   * @param connectionId - thread id
   */
  bool hasConnection(const DWORD connectionId) const;

  /**
   * Creates new or get existing ClientService connection for the specified thread.
   *
   * @param connectionId - thread id
   */
  ConnectionItem obtainConnection(const DWORD connectionId);

  void advise(ClientServicePtr& service,
      ClientServiceEventsSinkPtr& eventsSink);

  void unadvise(ClientServicePtr& service,
      ClientServiceEventsSinkPtr& eventsSink);

  void releaseSink(ConnectionEntry& connectionEntry);

// Members

private:

   ConnectionItemsMap connectionItems_; /** Map of connections.
                                        One per one thread. */

   CCriticalSection criticalSection_; /** Critical section object used for
                                      synchronization of all data
                                      modifications*/

};


} // namespace facebook


#endif // CLIENTSERVICEUTILS_H
