/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "StdAfx.h"
#include "RuntimeContext.h"

#include <afxmt.h>
#include <map>

#include <boost/bind.hpp>

#include "../sidebar/IESidebar.h"
#include "../toolbar/IEToolbar.h"

#include "../../util/Error.h"
#include "../../util/PtrUtils.h"
#include "../../util/ScopeGuard.h"


namespace facebook{

typedef DWORD ThreadId;

typedef std::map<ThreadId, IEToolbar*> IEToolbarsMap;

typedef std::map<ThreadId, IESidebar*> IESidebarsMap;

IEToolbarsMap ieToolbars_;

IESidebarsMap ieSidebars_;

CCriticalSection criticalSection_;

void setIEToolbar(IEToolbar* const ieToolbar, 
                  const ThreadId threadId = ::GetCurrentThreadId()) {
   using namespace boost;

   ScopeGuard critSectGuard(
         bind(&CCriticalSection::Lock, ref(criticalSection_)),
         bind(&CCriticalSection::Unlock, ref(criticalSection_)));

   ieToolbars_[threadId] = ieToolbar;
}

void setIESidebar(IESidebar* const ieSidebar, 
                  const ThreadId threadId = ::GetCurrentThreadId()) {
  using namespace boost;

  ScopeGuard critSectGuard(
         bind(&CCriticalSection::Lock, ref(criticalSection_)),
         bind(&CCriticalSection::Unlock, ref(criticalSection_)));

  ieSidebars_[threadId] = ieSidebar;
}

HWND RuntimeContext::getSidebarHwnd() {
   IESidebar* const ieSidebar = getSidebar();

   if (isNull(ieSidebar)) {
     return 0;
   }

   return ieSidebar->getSidebarWindow();
}


HWND RuntimeContext::getToolbarHwnd() {
   IEToolbar* const ieToolbar = getToolbar();

   if (isNull(ieToolbar)) {
     return 0;
   }

   return ieToolbar->getToolbarWindow();
}


bool RuntimeContext::isSidebarOpened() {
   const HWND ieSideBarHwnd = getSidebarHwnd();

   if (isNull(ieSideBarHwnd)) {
     return false;
   }

   return IsWindowVisible(ieSideBarHwnd) == TRUE;
}


void RuntimeContext::storeSidebar(IESidebar& ieSidebar) {
   setIESidebar(&ieSidebar);
}

IESidebar* RuntimeContext::getSidebar(const ThreadId threadId) {
  using namespace boost;

  ScopeGuard critSectGuard(
    bind(&CCriticalSection::Lock, ref(criticalSection_)),
    bind(&CCriticalSection::Unlock, ref(criticalSection_)));

  return ieSidebars_[threadId];
}

void RuntimeContext::storeToolbar(IEToolbar& ieToolbar) {
   setIEToolbar(&ieToolbar);
}


IEToolbar* RuntimeContext::getToolbar(const ThreadId threadId) {
  using namespace boost;

  ScopeGuard critSectGuard(
   bind(&CCriticalSection::Lock, ref(criticalSection_)),
   bind(&CCriticalSection::Unlock, ref(criticalSection_)));

  return ieToolbars_[threadId];
}

IWebBrowser2Ptr RuntimeContext::getBrowser(const ThreadId threadId) {
  IWebBrowser2Ptr browser = NULL;

  // try to get browser from Toolbar first
  IEToolbar *toolbar = getToolbar(threadId);
   if (toolbar) {
      browser = toolbar->getWebBrowser();
   }

   if (browser == 0) { // try to get browser from Sidebar
     IESidebar *sidebar = getSidebar(threadId);
      if (sidebar) {
        browser = sidebar->getParentBrowser();
      }
   } 

   if (browser == 0) {
     throw Error("Fatal error: failed to get browser");
   }

   return browser;
}

}
