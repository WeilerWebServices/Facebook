/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "stdafx.h"
#include "RegistrationUtils.h"

#include <boost/algorithm/string.hpp>
#include <boost/bind.hpp>
#include <iterator>
#include <vector>

#include "ObjectsServer.h"

#include "../../util/COMWrappers.h"
#include "../../util/ScopeGuard.h"
#include "../../util/StringUtils.h"


using namespace facebook;

typedef std::vector<facebook::RegStrEntry> RegStrEntriesVector;

namespace {

const String FACEBOOK_IE_TOOLBAR_PATH =  _T("Software\\Facebook\\IEToolbar");

const String EXTESIONS_SUB_KEY = 
   _T("Software\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Approved");


RegStrEntriesVector createServerEntries(const String& classId,
      const String& title, const String& path) {
   RegStrEntriesVector entries;

   const String clsidKeyName = TEXT("CLSID");
   const String inprocServerKeyName = TEXT("InprocServer32");
   const String delimeter = TEXT("\\");
   const String threadingModelValName = TEXT("ThreadingModel");
   const String apartmentValue = TEXT("Apartment");

   entries.push_back(RegStrEntry(HKEY_CLASSES_ROOT,
         clsidKeyName + delimeter + classId,
          _T(""), title));
   
   entries.push_back(RegStrEntry(HKEY_CLASSES_ROOT,
         clsidKeyName + delimeter + classId + delimeter + inprocServerKeyName,
         _T(""),  path));

   entries.push_back(RegStrEntry(HKEY_CLASSES_ROOT,
         clsidKeyName + delimeter + classId + delimeter + inprocServerKeyName,
         threadingModelValName, apartmentValue));

   return entries;
}

bool registerExtension(const String& classId, const String& title) {
   OSVERSIONINFO osVerInfo = {0};

   osVerInfo.dwOSVersionInfoSize = sizeof(osVerInfo);
   GetVersionEx(&osVerInfo);

   if (VER_PLATFORM_WIN32_NT == osVerInfo.dwPlatformId) {
      HKEY key = 0;
      DWORD disposition = 0;
      const LRESULT createKeyResult = RegCreateKeyEx(HKEY_LOCAL_MACHINE,
        EXTESIONS_SUB_KEY.c_str() ,0, 0, REG_OPTION_NON_VOLATILE, KEY_WRITE, 0, &key, &disposition);
      if (createKeyResult != ERROR_SUCCESS) {
         return false;
      }

      const LRESULT setValueResult = RegSetValueEx(key, classId.c_str(), 0,
            REG_SZ, (LPBYTE)title.c_str(),
            (title.size() + 1) * sizeof(Char));

      RegCloseKey(key);

      if (setValueResult != ERROR_SUCCESS) {
         return false;
      }
   }

   return true;
}


bool deleteExtension(const String& classId) {
   OSVERSIONINFO osVerInfo = {0};

   osVerInfo.dwOSVersionInfoSize = sizeof(osVerInfo);
   GetVersionEx(&osVerInfo);

   if (VER_PLATFORM_WIN32_NT == osVerInfo.dwPlatformId) {
      HKEY key = 0;
      DWORD disposition = 0;
      const LRESULT createKeyResult = RegCreateKeyEx(HKEY_LOCAL_MACHINE,
         EXTESIONS_SUB_KEY.c_str(), 0, 0, REG_OPTION_NON_VOLATILE, KEY_WRITE, 0, 
         &key, &disposition);

      if (createKeyResult != ERROR_SUCCESS)
         return false;

      const LRESULT deleteValueResult = RegDeleteValue(key, classId.c_str());
      RegCloseKey(key);

      if (deleteValueResult != ERROR_SUCCESS) {
         return false;
      }
   }
   return true;
}

} // namespace

namespace facebook {


bool registerSidebar(const CLSID& classId, const String& title) {
   const String classIdString = toString(classId);
   RegStrEntry toolbarEnrty(HKEY_LOCAL_MACHINE, 
      _T("Software\\Microsoft\\Internet Explorer\\Explorer Bars"),
      classIdString, title) ;
   return toolbarEnrty.write();
}


bool registerToolbar(const CLSID& classId, const String& title) {
   const String classIdString = toString(classId);
   RegStrEntry toolbarEnrty(HKEY_LOCAL_MACHINE, 
       _T("Software\\Microsoft\\Internet Explorer\\Toolbar"),
       classIdString, title) ;
  
   return toolbarEnrty.write();
}

bool registerServer(const CLSID& classId, const String& title) {
   const String classIdString = toString(classId);

   const String moduleFileName = ObjectsServer::getInstanceFileName();

   RegStrEntriesVector entries = createServerEntries(classIdString, title,
         moduleFileName);

   for (unsigned int i = 0; i < entries.size(); ++i) {
     entries[i].write();
   }

   return registerExtension(classIdString, title);
}


bool unRegisterServer(const CLSID& classId) {
   const String classIdString = toString(classId);

   const String moduleFileName = ObjectsServer::getInstanceFileName();

   RegStrEntriesVector entries = createServerEntries(classIdString, _T(""),
      moduleFileName);

   for (unsigned int i = 0; i < entries.size(); ++i) {
     entries[i].removeKey();
   }

   return deleteExtension(classIdString);
}


bool facebook::registerInCategory(const CLSID& classId, 
                                  const CATID& categoryId) {
   CoInitialize(0);


   ICatRegisterPtr categories;

   const HRESULT createResult = categories.CreateInstance(
         CLSID_StdComponentCategoriesMgr);
   
   if (FAILED(createResult)) {
      return false;
   }

   CATID categoryIds[] = {categoryId};
   const HRESULT regResult = categories->RegisterClassImplCategories(classId, 
     1, categoryIds);
   
   if (FAILED(regResult)) {
      return false;
   }

   ScopeGuard coUninitializeGuard(
    boost::bind(CoUninitializeWrapper()));

   return true;
}


bool unRegisterToolbar(const CLSID& classId) {
   const String classIdString = toString(classId);
   RegStrEntry toolbarEntry(HKEY_LOCAL_MACHINE, 
       _T("Software\\Microsoft\\Internet Explorer\\Toolbar"),
       classIdString, _T("")) ;

   return toolbarEntry.remove();
}


bool facebook::unRegisterSidebar(const CLSID& classId) {
   const String classIdString = toString(classId);
   RegStrEntry sideBarEntry(HKEY_LOCAL_MACHINE, 
      _T("Software\\Microsoft\\Internet Explorer\\Explorer Bars"),
      classIdString, _T("")) ;

   return sideBarEntry.remove();
}

void facebook::deletePostSetupEntries()
{
  // force IE to reload settings.
  RegStrEntriesVector entries;
  entries.push_back(RegStrEntry(HKEY_CLASSES_ROOT, 
    _T("Component Categories\\{00021493-0000-0000-C000-000000000046}\\Enum"), 
    _T(""), _T("")));
  entries.push_back(RegStrEntry(HKEY_CLASSES_ROOT, 
    _T("Component Categories\\{00021494-0000-0000-C000-000000000046}\\Enum"), 
    _T(""), _T("")));
  entries.push_back(RegStrEntry(HKEY_CURRENT_USER, 
    _T("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Discardable\\PostSetup\\Component Categories\\{00021493-0000-0000-C000-000000000046}\\Enum"), 
    _T(""), _T("")));
  entries.push_back(RegStrEntry(HKEY_CURRENT_USER, 
    _T("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Discardable\\PostSetup\\Component Categories\\{00021494-0000-0000-C000-000000000046}\\Enum"), 
    _T(""), _T("")));

  bool result = false;
  for (unsigned int i = 0; i < entries.size(); ++i) {
     result = entries[i].removeKey();
  }
}


bool facebook::unRegisterInCategory(const CLSID& classId, const CATID& categoryId) {
  CoInitialize(0);

  ICatRegisterPtr categories;

  const HRESULT createResult = categories.CreateInstance(
       CLSID_StdComponentCategoriesMgr);

  if (FAILED(createResult)) {
   return false;
  }

  CATID categoryIds[] = {categoryId};
  const HRESULT regResult = categories->UnRegisterClassImplCategories(
       classId, 1, categoryIds);
  if (FAILED(regResult)) {
    return false;
  }

   ScopeGuard coUninitializeGuard(
    boost::bind(CoUninitializeWrapper()));

  return true;
}


} // !namespace facebook
