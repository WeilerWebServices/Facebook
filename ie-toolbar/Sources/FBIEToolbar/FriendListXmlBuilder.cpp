/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "StdAfx.h"
#include "FriendListXmlBuilder.h"
#include "resource.h"

#include "../common/UrlUtils.h"

#include "../util/ModuleUtils.h"
#include "../util/XMLUtils.h"

#include <functional>

#pragma warning(disable : 4180)
#include <boost/algorithm/string.hpp>
#include <boost/bind.hpp>
#include <boost/lexical_cast.hpp>

namespace facebook{namespace FriendsListXmlBuilder{

using namespace std;

void addFriendNode(MSXML2::IXMLDOMDocumentPtr xmlDoc,
                   MSXML2::IXMLDOMNodePtr friendsNode,
                   const UserData& friendItem) {

  using namespace XMLUtils;
  using boost::lexical_cast;
  MSXML2::IXMLDOMNodePtr friendNode = xmlDoc->createNode(NODE_ELEMENT, 
    _T("friend"), _T("")); 
      
  friendsNode->appendChild(friendNode);
  
  addTextAttributeToNode(xmlDoc, friendNode, _T("id"), friendItem.getID() );
  
  friendNode->appendChild(
    createNodeWithText(xmlDoc, _T("name"), friendItem.getName() ) );

  // build status node
  MSXML2::IXMLDOMNodePtr statusNode = xmlDoc->createNode(NODE_ELEMENT, _T("status"), _T(""));
      
  statusNode->appendChild(
    createNodeWithText(xmlDoc, _T("message"), friendItem.getStatusMessage()));
  statusNode->appendChild(
         createNodeWithText(xmlDoc, _T("time"), lexical_cast<String>(friendItem.getStatusUpdateTime())));
  statusNode->appendChild( 
         createNodeWithText(xmlDoc, _T("statusID"), friendItem.getStatusID()));
  friendNode->appendChild(statusNode);

  // add friends small picture
  friendNode->appendChild(
    createNodeWithText(xmlDoc, _T("picSmall"), friendItem.getSmallPicUrl() ) );

  String picSQ = friendItem.getSquarePicUrl();
  
  if (picSQ.empty()) {
         picSQ = buildHtmlResourceUrl(getModuleFileName(AfxGetInstanceHandle())
       , IDR_TDEFAULT);
  }
      
  // add friends square picture

  friendNode->appendChild(
    createNodeWithText(xmlDoc, _T("picSquare"), picSQ ) );


  friendNode->appendChild(createNodeWithText(xmlDoc, 
    _T("wallCount"), 
    lexical_cast<String>(friendItem.getWallPostsCount())));

  friendNode->appendChild(createNodeWithText(xmlDoc, 
    _T("notesCount"), lexical_cast<String>(friendItem.getNotesCount())));

  friendNode->appendChild(createNodeWithText(xmlDoc, 
    _T("profileUpdateTime"), 
    lexical_cast<String>(friendItem.getProfileUdatedTime())));
}

String friendsToXml(const FriendsList& friends) {
  using namespace XMLUtils;
  using boost::lexical_cast;

  MSXML2::IXMLDOMDocumentPtr xmlDoc(MSXML2::CLSID_DOMDocument);
  MSXML2::IXMLDOMNodePtr friendsNode = xmlDoc->createNode(NODE_ELEMENT, 
    _T("friends"), _T("")); 

  xmlDoc->appendChild(friendsNode);
   
  const FriendsList::const_iterator itFriendsEnd = friends.end();

   for(FriendsList::const_iterator itFriends = friends.begin();  
     itFriends != itFriendsEnd; 
     ++itFriends) {
     addFriendNode(xmlDoc, friendsNode, (*itFriends));
   }

   return xmlToString(xmlDoc);
}

}} // !namespace facebook::FriendsListXmlBuilder
