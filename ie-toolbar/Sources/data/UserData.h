/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#ifndef USERDATA_U
#define USERDATA_U

#include <algorithm>

#include "../util/StringUtils.h"


namespace facebook{

/**
 * class UserData
 *
 * Holds information about the 
 * facebook's user
 *
 */
class UserData{

    // internal types
public:

  /**
   * struct Status
   *   
   * Holds information about users 
   * status
   */
  struct Status {
  public:
       Status() : message_(_T("")), time_(0), id_(_T("")) {}
       Status(const String& message, const size_t time, const String id ) 
          : message_(message), time_(time), id_(id) {}
  public:
       String message_; // message text
       size_t time_; // time value
       String id_; // status id

       const bool operator == (const Status& other) const{
          return message_ == other.message_ && time_ == other.time_ &&  id_ == other.id_;
     }

  }; // !struct Status

 /*** trivial constructor */
 UserData();
 UserData(const String& id, const String& name, const Status& status,
          const String& smallPicUrl, const String& squarePicUrl, const size_t profileUdatedTime,
          const size_t notesCount, const size_t wallPostsCount);

public:


  String getID() const{ return id_;}

  String getName() const{ return name_; }

  String getSmallPicUrl() const{ return smallPicUrl_;}

  String getSquarePicUrl() const{ return squarePicUrl_;}

  size_t getProfileUdatedTime() const{ return profileUdatedTime_;}

  size_t getNotesCount() const{ return notesCount_; }

  size_t getWallPostsCount() const{ return wallPostsCount_;}

  size_t getStatusUpdateTime() const{ return status_.time_;}

  String getStatusMessage() const{ return status_.message_;}

  String getStatusID() const{ return status_.id_;}

  String getLoginCookies() const { return loginCookies_;}

  void setLoginCookies(const String& data) {loginCookies_ = data;}

  //compare two UserData objects
  const bool operator == (const UserData& other) const;

   // members
private:
  String id_; // id of user
  String name_;// name of user
  Status status_;// status text of user
  String smallPicUrl_;  // small picture of user
  String squarePicUrl_; // small square picture of user
  size_t profileUdatedTime_;   // last time when profile was updated
  size_t notesCount_; // count of the notes
  size_t wallPostsCount_;// count of the wall posts
  String loginCookies_;
};

// vector of (UserData)
typedef  std::vector<UserData> FriendsList;

enum SortMode{
  NO_SORT,
  SORT_BY_LAST_UPDATE_TIME,
  SORT_BY_STATUS_UPDATE_TIME,   
  SORT_BY_PROFILE_UPDATE_TIME,
  SORT_BY_NAME
};

  /**
   * Returns last updated time of user data
   *
   * @param userData a user information (by const-ref)
   *
   * @return last updated time (by value)
   */
  size_t getLastUpdateTime(const UserData& userData);

  /**
   * Returns last updated time of user status
   *
   * @param userData a user information (by const-ref)
   *
   * @return last updated time of status (by value)
   */
  size_t getStatusUpdateTime(const UserData& userData);

  /**
   * apply filter to vector of friends data
   *
   * @param friends a vector of user data (by ref)
   * @param filter a filter text(by const-ref)
   *
   * @return void
   */
  void applyFilter(FriendsList& friends, const String& filter);

  /**
   * apply sorting to friend vector
   *
   * @param friends a user information (by ref)
   * @param sortMode a mode of sort
   *
   * @return last updated time (by value)
   */
  void applySort(FriendsList& friends, SortMode& sortMode);

} // !namespace facebook



#endif