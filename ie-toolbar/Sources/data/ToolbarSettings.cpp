/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "StdAfx.h"
#include "ToolbarSettings.h"

#include <map>

#include "../common/CommonConstants.h"
#include "../util/RegistryUtils.h"


namespace facebook{

using namespace std;


// ---------------------------------------------------------------------
// class ToolbarSettings 
// ---------------------------------------------------------------------

ToolbarSettings::ToolbarSettings() {
  init();
}

//we use map to define optionId and option key name in the registry
static std::map <long, String> toolbarOptions; 

//static variables instantiation
ToolbarSettings ToolbarSettings::instance_;

void ToolbarSettings::init() {
  //define map optionId<->option name

  toolbarOptions[TO_NEWFRIENDREQUEST] = kNewFriendRequest;
  toolbarOptions[TO_NEWMESSAGE] = kNewMessage;
  toolbarOptions[TO_NEWPOKE] = kNewPoke;
  toolbarOptions[TO_NEWFRIEND] = kNewFriend;
  toolbarOptions[TO_NEWEVENTINVITE] = kNewEventInvite;
  toolbarOptions[TO_NEWSHARE] = kNewShare;
  toolbarOptions[TO_NEWSMONEWROTEWALL] = kNewSmoneWroteWall;
  toolbarOptions[TO_FRIENDUPDATEDUPROFILE] = kFriendUpdatedProfile;
  toolbarOptions[TO_FRIENDUPDATEDSTATUS] = kFriendUpdatedStatus;
  toolbarOptions[TO_FRIENDUPDATEDALBUMS] = kFriendUpdatedAlbum;
  toolbarOptions[TO_FRIENDUPDATEDWALL] = kFriendUpdatedWall;
  toolbarOptions[TO_FRIENDWROTENOTE] = kFriendWroteNote;
  toolbarOptions[TO_NEWPOPUPNOTIFICATION] = kPopupNotification;
  toolbarOptions[TO_NEWGROUPINVITE] = kNewGroupInvite;
  toolbarOptions[TO_CURRENTCULTURE] = kCurrentCultureId;
  toolbarOptions[TO_CHECKUPDATES] = kCheckUpdates;
  toolbarOptions[TO_UPDATEURLPREFIX] = kFacebookUpdatesUrlPrefixName;
  toolbarOptions[TO_UPDATESCOUNTER] = kUpdatesCounter;
  toolbarOptions[TO_UPDATESTIMEOUT] = kUpdatesTimeout;
}

bool ToolbarSettings::isPopupEnabled() {
  return readValue(TO_NEWPOPUPNOTIFICATION, true);
}

bool  ToolbarSettings::checkKey(long key) {
  if (key >= (long)toolbarOptions.size()) {
    return false;
  }
  return true;
}

bool ToolbarSettings::readValue(long option, bool defaultValue) {
  DWORD result = 0;
  if (!checkKey(option)) {
    return result != 0;
  }
  try{
    DWORD defaultData = defaultValue ? 1 : 0;
	  HKEY hKey;
	  if (RegistryUtils::getWritableRegistryKey(hKey)) {
		  RegistryUtils::readDword(hKey, 
		  kToolbarSettingsRegistryPath, toolbarOptions[option], result, defaultData);
		  RegCloseKey(hKey);
	  }
  }
  catch (...) {
  }
  return result != 0;
}

int ToolbarSettings::readIntValue(long option, int defaultValue) {
  DWORD result = 0;
  if (!checkKey(option)) {
    return result != 0;
  }
  try{
    DWORD defaultData = defaultValue;
	  HKEY hKey;
	  if (RegistryUtils::getWritableRegistryKey(hKey)) {
		  RegistryUtils::readDword(hKey, 
		  kToolbarSettingsRegistryPath, toolbarOptions[option], result, defaultData);
		  RegCloseKey(hKey);
	  }
  }
  catch (...) {
  }
  return result;
}

String ToolbarSettings::readStringValue(long option) {
  String result;
  if (!checkKey(option)) {
    return result;
  }
  try{
    HKEY hKey;
    if (RegistryUtils::getWritableRegistryKey(hKey)) {
      RegistryUtils::readString(hKey, 
        kToolbarSettingsRegistryPath, toolbarOptions[option], result);
      RegCloseKey(hKey);
    }
  }
  catch (...) {
  }
  return result;
}

void ToolbarSettings::writeValue(long option, bool value) {
  if (!checkKey(option)) {
    return;
  }
  try{
    HKEY hKey;
    if (RegistryUtils::getWritableRegistryKey(hKey)) {
      RegistryUtils::writeDword(hKey, 
        kToolbarSettingsRegistryPath, toolbarOptions[option], value? 1: 0);
      RegCloseKey(hKey);
    }
  }
  catch (...) {
  }
}

void ToolbarSettings::writeValue(long option, int value) {
  if (!checkKey(option)) {
    return;
  }
  try{
    HKEY hKey;
    if (RegistryUtils::getWritableRegistryKey(hKey)) {
      RegistryUtils::writeDword(hKey, 
        kToolbarSettingsRegistryPath, toolbarOptions[option], value);
      RegCloseKey(hKey);
    }
  }
  catch (...) {
  }
}

void ToolbarSettings::writeValue(long option, String value) {
  if (!checkKey(option)) {
    return;
  }
  try{
    HKEY hKey;
    if (RegistryUtils::getWritableRegistryKey(hKey)) {
      RegistryUtils::writeString(hKey, 
        kToolbarSettingsRegistryPath, toolbarOptions[option], value);
      RegCloseKey(hKey);
    }
  }
  catch (...) {
  }
}

} // !namespace facebook