/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "StdAfx.h"

#include "LoginDlg.h"

#include "../common/GenericHtmlView.h"
#include "../common/ResourceMessages.h"
#include "../common/ToolbarMessages.h"

#include "../util/WndUtils.h"
#include "../util/ShellUtils.h"

#include "../system/ProtocolFactory.h"

namespace facebook{

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// ---------------------------------------------------------------------
// class LoginDlg
// ---------------------------------------------------------------------

IMPLEMENT_DYNAMIC(LoginDlg, CDialog)

LoginDlg::LoginDlg(const String& loginURL , CWnd* pParent /*=NULL*/) :
  loginURL_(loginURL),
  cookies_(_T("")),
  loginHtmlView_(NULL),
  CDialog(LoginDlg::IDD, pParent) {
}


LoginDlg::~LoginDlg() {
}

void LoginDlg::DoDataExchange(CDataExchange* pDX) {
  CDialog::DoDataExchange(pDX);
}

void LoginDlg::PostNcDestroy() {
  // unsubscribe from https responce trakings
  CComPtr<IInternetSession> session;
  CoInternetGetSession(0, &session, 0);
  session->UnregisterNameSpace(httpsFactory_, L"https");
  httpsFactory_.Release();

  // unsubscribe from http responce trakings
  session->UnregisterNameSpace(httpsFactory_, L"http");
  httpFactory_.Release();

  // destroy html view ...
  if (loginHtmlView_ && IsWindow(loginHtmlView_->m_hWnd)) {
    loginHtmlView_->ShowWindow(SW_HIDE);
    loginHtmlView_->DestroyWindow();
  }
  CDialog::PostNcDestroy();
}

CRect LoginDlg::getHtmlViewRect() const {
  // html view whould be placed above panel with close button...

  static const size_t BUTTON_IDENT = 2;
  // Get rectangle of the window
  CRect clientRect;
  GetClientRect(clientRect);
  const CPoint leftTop(clientRect.left, clientRect.top);
  const CSize originalSize(clientRect.Width(), clientRect.Height());  

  // Get Ok button rectangle
  CRect closeButtonRectangle;  
  CWnd* closeButton = GetDlgItem(IDOK);
  closeButton->GetClientRect(closeButtonRectangle);
  // Set HtmlView size to all window dimension except 
  // bottom space for close button
  const CSize htmlViewSize(originalSize.cx, 
        originalSize.cy - closeButtonRectangle.Height() - BUTTON_IDENT);

  const CRect htmlViewRect(leftTop, htmlViewSize);
  return htmlViewRect;
}

BOOL LoginDlg::OnInitDialog() {
  updateView();
  resizeCloseButton();
  if (GetParent() && !loginURL_.empty()) {
    const CRect htmlViewRect = getHtmlViewRect();

    // subscribe for https responces tracking
    CComPtr<IInternetSession> session;
    CoInternetGetSession(0, &session, 0);
    SessionMetaFactory::CreateInstance(CLSID_HttpSProtocol, &httpsFactory_, GetSafeHwnd());
    session->RegisterNameSpace(httpsFactory_, CLSID_NULL, L"https", 0, 0, 0);

    // subscribe for http responces tracking
    SessionMetaFactory::CreateInstance(CLSID_HttpProtocol, &httpFactory_, GetSafeHwnd());
    session->RegisterNameSpace(httpFactory_, CLSID_NULL, L"http", 0, 0, 0);

    // lets use default html view ...
    loginHtmlView_= new GenericHtmlView();
    loginHtmlView_->addUIShowingFlags(DOCHOSTUIFLAG_NO3DBORDER | DOCHOSTUIFLAG_SCROLL_NO);
    loginHtmlView_->Create(0, 0, WS_CHILD | WS_TABSTOP, htmlViewRect, this, AFX_IDW_PANE_FIRST); 
    loginHtmlView_->ShowWindow(SW_SHOW);
    loginHtmlView_->Navigate2(loginURL_.c_str());
  }
  return CDialog::OnInitDialog();
}

void LoginDlg::updateView(int changeId) {
  UNREFERENCED_PARAMETER(changeId);
  
  // Change Window to RTL in the RTL MS Windows
  if (isBiDi(LOCALE_SYSTEM_DEFAULT)) {
    addExStyle(GetSafeHwnd(), WS_EX_LAYOUTRTL, true);
  }

  SetWindowText(ResourceMessages::getMessage(kLoginLoginToFacebook, true).c_str());

  SetDlgItemText(IDOK, 
    ResourceMessages::getMessage(kLoginCloseLoginWindow, true).c_str());
}

void LoginDlg::resizeCloseButton() {
  const int textMargin = 20; // Button margin
  
  SIZE textSize;
  HFONT windowFont = (HFONT)::SendMessage(GetSafeHwnd(), WM_GETFONT, 0, 0);
  HDC context = ::GetDC(GetSafeHwnd());
  SelectObject(context, windowFont);

  CRect controlRect;
  CRect windowRect;
  GetWindowRect(&windowRect);

  // Set Cancel Button
  String message = ResourceMessages::getMessage(kLoginCloseLoginWindow);
  GetTextExtentPoint32(context, message.c_str(), message.length(), &textSize);

  CWnd* btn = GetDlgItem(IDOK);
  btn->GetWindowRect(&controlRect);
  ScreenToClient(&controlRect);
  int buttonWidth = textSize.cx + 2 * textMargin;
  int buttonX = (windowRect.Width() - buttonWidth) / 2;
  btn->MoveWindow(buttonX, controlRect.top, 
    buttonWidth, controlRect.Height(), TRUE);
}

LRESULT LoginDlg::onMessage(WPARAM wParam, LPARAM lParam) {
  UNREFERENCED_PARAMETER(lParam);
  cookies_ += String((Char*)wParam);
  return TRUE;
}

BEGIN_MESSAGE_MAP(LoginDlg, CDialog)
  ON_MESSAGE(TBM_COOKIES, onMessage)
END_MESSAGE_MAP()


} // !namespace facebook
