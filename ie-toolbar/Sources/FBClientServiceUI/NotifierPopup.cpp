/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/

#include "StdAfx.h"
#include "NotifierPopup.h"

#include "resource.h"

#include "../common/ToolbarMessages.h"
#include "../common/ResourceMessages.h"
#include "../common/UrlUtils.h"

#include "../util/BrowserUtils.h"
#include "../util/ModuleUtils.h"
#include "../util/ResourceUtils.h"
#include "../util/ShellUtils.h"



#include <boost/algorithm/string/replace.hpp>

namespace facebook{

using boost::replace_all;
IMPLEMENT_DYNAMIC(NotifierPopup, CWnd)

const long kNotifTimeout   = 10000;
const long kNotifWidth     = 210;
const long kNotifHeight    = 100;
const long kNotifIndent    = 2;
const long kNotifShift     = 5;
const String  kParam0      = _T("_caption1");
const String  kParam1      = _T("_src1");
const String  kParam2      = _T("_label1");


NotifierPopup::NotifierPopup(const String& url, 
                             const String& src, 
                             const String& msg): url_(url), 
                             src_(src), 
                             msg_(msg) {
}


// instantiate statics
long NotifierPopup::isEmptyCounter_ = 0;
long NotifierPopup::counter_        = 0;

BEGIN_MESSAGE_MAP(NotifierPopup, CWnd)
   ON_WM_LBUTTONUP()
   ON_WM_TIMER()
   ON_MESSAGE(TBM_NOTIFIER_LOADED, onNotifierLoad)  
END_MESSAGE_MAP()


void NotifierPopup::OnTimer(UINT nIDEvent) {
  CWnd::OnTimer(nIDEvent);
  closeIt();
   
}

void NotifierPopup::addInstance(const String& url, 
                                           const String& src, 
                                           const String& msg) {
  // if the last window is disappeared then start from the begining
  if (!isEmptyCounter_) {
    counter_ = 0;
  }

  ++counter_;
  ++isEmptyCounter_;

  // create new nofifier popup object instance
  NotifierPopup * popup = new NotifierPopup(url, src, msg);

  //create popup window
  popup->create();
}

bool NotifierPopup::handleHtmlLoad(LPCTSTR url, BOOL* cancelAction, CWnd* notifyWindow) {

  UNREFERENCED_PARAMETER(cancelAction);
  if (isCustomAction(url)) {
    notifyWindow->GetParent()->PostMessage(TBM_NOTIFIER_LOADED);
  }
  return false;
}

BOOL NotifierPopup::create() {
   BOOL bRes = CWnd::CreateEx(WS_EX_TOPMOST | WS_EX_TOOLWINDOW, 
      AfxRegisterWndClass(CS_VREDRAW | CS_HREDRAW | CS_OWNDC, 
      LoadCursor(NULL, IDC_ARROW), NULL), _T(""), WS_POPUP, 
      calculatePositionRect(), NULL, 0);

   SetOwner(NULL);

   initView();

   SetTimer(1, kNotifTimeout, NULL);
   ShowWindow(SW_SHOWNOACTIVATE);

   return bRes;
}

void NotifierPopup::initView() {

   popupHtmlView_ = new GenericHtmlView(NotifierPopup::handleHtmlLoad);

   popupHtmlView_->Create(0, 0, WS_CHILD | WS_VISIBLE, calculateWindowRect(), 
      this, AFX_IDW_PANE_FIRST);

   int notifierIdr = IDR_HTML_NOTIFIER;
   if (ResourceMessages::isTextRightAligned()) {
     notifierIdr = IDR_HTML_NOTIFIER_RTL;
   }
   String notifierHtml = loadStringFromResources(notifierIdr, RT_HTML);

   String caption = ResourceMessages::getMessage(kNotifierFacebookNotification, true);
   
   replace_all(notifierHtml, kParam0, caption);
   replace_all(notifierHtml, kParam1, src_);
   replace_all(notifierHtml, kParam2, msg_);
   
   popupHtmlView_->writeHtml(popupHtmlView_->getHTMLDoc(), notifierHtml);

}


CRect NotifierPopup::calculatePositionRect() const{
   CRect result;
   CRect rectWin;

   SystemParametersInfo(SPI_GETWORKAREA, 0, &rectWin, 0);

   // Determine if MS Windows is right aligned and set x position
   // of the notifier popup and width
   int xPosition = isBiDi(LOCALE_SYSTEM_DEFAULT) ? kNotifShift :
     rectWin.right - kNotifWidth - kNotifShift;
   int width = isBiDi(LOCALE_SYSTEM_DEFAULT) ? kNotifShift + kNotifWidth :
     rectWin.right - kNotifShift;
   result.SetRect(xPosition, rectWin.bottom - kNotifHeight * counter_, 
                  width, rectWin.bottom - kNotifHeight * (counter_ - 1) - kNotifShift);


   return result;
}

CRect NotifierPopup::calculateWindowRect() const{
   CRect clientRect;
   GetClientRect(clientRect);
   // stretch control around window 
   clientRect.top    -= kNotifIndent;
   clientRect.bottom += kNotifIndent;
   clientRect.right  += kNotifIndent;
   clientRect.left   -= kNotifIndent;

   return clientRect;
}


void NotifierPopup::closeIt() {
   if (this && this->GetSafeHwnd()) {
      SendMessage(WM_CLOSE);
      delete this;
      --isEmptyCounter_;
   }
}


void NotifierPopup::OnLButtonUp(UINT type, CPoint point) {
   UNREFERENCED_PARAMETER(type);
   UNREFERENCED_PARAMETER(point);
   
   closeIt();
}

LRESULT NotifierPopup::onNotifierLoad(WPARAM wParam, LPARAM lParam) {
  UNREFERENCED_PARAMETER(wParam);
  UNREFERENCED_PARAMETER(lParam);

  ShowWindow(SW_HIDE);
  BrowserUtils::openUrlNewWindow(url_);
  return 0;
}

} // !namespace facebook
