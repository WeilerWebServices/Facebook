/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "StdAfx.h"
#include "StringUtils.h"

#include <algorithm>
#include <functional>
#include <locale>
#include <boost/algorithm/string/case_conv.hpp>
#include <boost/algorithm/string/erase.hpp>



namespace facebook{

using namespace std;

String toString(const CLSID& classId) {
  LPWSTR clsIdOLEStr = 0;
  TCHAR  szCLSID[MAX_PATH];
  const HRESULT stringFromIDResult = StringFromIID(classId, &clsIdOLEStr);
  if (FAILED(stringFromIDResult)) {
    return String();
  }

  const size_t clsIdStrSize = ARRAYSIZE(szCLSID);

  if (clsIdOLEStr) {
    CharsVector holder(clsIdStrSize-sizeof(TCHAR));
#ifdef UNICODE
    lstrcpyn(&holder[0], clsIdOLEStr, clsIdStrSize);
#else
    WideCharToMultiByte(CP_ACP, 0, clsIdOLEStr, -1, &holder[0],
       clsIdStrSize, 0, 0);
#endif // UNICODE
    
    String result(holder.begin(), holder.end());

    boost::erase_all(result, _T("\0"));

    CoTaskMemFree(clsIdOLEStr);
    
    return result;
   }
   return String();
}


_bstr_t toBSTR(const String& text) {
   _bstr_t res(text.c_str());
   return res;
}


String  toString(_bstr_t bstr) {
   return String(bstr);
}


String loadString(const UINT stringId) {
   using namespace ATL;

   CString resourceString;
   resourceString.LoadString(stringId);

   return resourceString.GetString();
}


WidenString toWiden(const NarrowString& narrow) {
  WidenString widen;
  widen.resize(narrow.size());

  MultiByteToWideChar(CP_ACP, 0, narrow.c_str(), narrow.size(),
       &widen[0], widen.size());

  return widen;
}

NarrowString toNarrow(const WidenString& widen) {
  NarrowString narrow;
  narrow.resize(widen.size());

  WideCharToMultiByte(CP_ACP, 0, widen.c_str(), widen.size(),
    &narrow[0], narrow.size(), NULL, NULL);

  return narrow;
}

// ---------------------------------------------------------------------
// class StringCILess
// ---------------------------------------------------------------------


StringCILess::StringCILess(const std::locale& locale /*= std::locale::classic()*/) 
   : locale_(locale)
   , type_(std::use_facet<CType>(locale)) {
}

bool StringCILess::operator ()(const String& first, const String& second) const {
   return std::lexicographical_compare(first.begin(), first.end(),
      second.begin(), second.end(), CharCILess(type_));
}


} // !namespace facebook