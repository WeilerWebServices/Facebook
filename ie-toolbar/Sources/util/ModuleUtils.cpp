/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 


#include "StdAfx.h"
#include "ModuleUtils.h"

namespace facebook{

String getModuleFileName(const HMODULE moduleHandle) {
  CharsVector buffer(MAX_PATH);
  const unsigned int nameSize = GetModuleFileName(moduleHandle, &buffer[0],
    buffer.size());

  if (nameSize == ERROR_INSUFFICIENT_BUFFER) {
    return String();
  }

  return String(buffer.begin(), buffer.begin() + nameSize);
}

String getModuleFileNameOnly(const HMODULE moduleHandle) {
  String mudulePath = getModuleFileName(moduleHandle);
  int position = mudulePath.rfind(_T("\\"));
  return String(mudulePath.begin() + position + 1, mudulePath.end());
}

String getModuleVersion(const HMODULE moduleHandle) {
  String result;
  String filename = getModuleFileName(moduleHandle);
  DWORD	handle;
  DWORD	fileVersionInfoSize = GetFileVersionInfoSize(filename.c_str(), &handle);
  if (!fileVersionInfoSize)
		return result;

  LPVOID data = (LPVOID)new BYTE[fileVersionInfoSize];
	if (!data)
		return result;

  if (!GetFileVersionInfo(filename.c_str(), handle, fileVersionInfoSize, data)) {
    delete[] data;
		return result;
  }

	// catch default information
	LPVOID	info;
	UINT		infolength;
  VS_FIXEDFILEINFO fileInfo;
  memset(&fileInfo, 0, sizeof(fileInfo));
	if (VerQueryValue(data, _T("\\"), &info, &infolength)) {
    // if the size is correct then copy the information
    if (infolength == sizeof(fileInfo)) {
			memcpy(&fileInfo, info, infolength);
      StringStream stream;
      stream << ((fileInfo.dwFileVersionMS & 0xFFFF0000) >> 16) 
             << _T(".")
             << (fileInfo.dwFileVersionMS & 0x0000FFFF) 
             << _T(".")
             << ((fileInfo.dwFileVersionLS & 0xFFFF0000) >> 16)
             << _T(".")
             << (fileInfo.dwFileVersionLS & 0x0000FFFF);
      result = stream.str();
    }
	}	
  delete[] data;

	return result;

}

}// !namespace facebook
