/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "stdafx.h"
#include "RegistryUtils.h"

#include "iepmapi.h"

#include "../common/CommonConstants.h"

namespace facebook{
using namespace std;

// ---------------------------------------------------------------------
// class RegistryUtils
// ---------------------------------------------------------------------

const size_t kMaxRegistryStringLength = 255; // maximum length of registry string


bool RegistryUtils::writeDword(const HKEY rootKey, const String subKey, 
                               const String name, const DWORD value) {

  HKEY key = NULL;
  HRESULT  res = RegCreateKeyEx(rootKey, subKey.c_str(), 0, NULL, 0, 
     KEY_WRITE, NULL, &key, NULL);

  if (res != ERROR_SUCCESS) {
     return false;
  }
  // Write
  res = RegSetValueEx(key, name.c_str(), 0, 
    REG_DWORD, (LPBYTE)&value, sizeof(DWORD));
  ::RegCloseKey (key);
  return res == ERROR_SUCCESS;
}

bool RegistryUtils::readDword(const HKEY rootKey, const String subKey, 
                              const String name, DWORD& value, const DWORD defaultValue) {
  HKEY key = NULL;

  // Open the appropriate key (select the registry hive based on whether this
  //   is installation was done by an administrator)
  HRESULT res = RegOpenKeyEx (rootKey, subKey.c_str(), 0, KEY_READ, &key);

  bool readOk = false;
  if (res == ERROR_SUCCESS) {
    // Read the value if we can
    DWORD  type = 0;
    DWORD  size = sizeof(DWORD);
    DWORD  buffer = 0;
    res = ::RegQueryValueEx(key, name.c_str(), NULL, &type, (LPBYTE)&buffer, &size);
    ::RegCloseKey (key);
    if (res == ERROR_SUCCESS) {
       // We have the value - return it
       value = buffer;
       readOk = true;
    }
  }
  // Copy from programatically supplied default instead
  if (!readOk) {
    value = defaultValue;
  }
  return readOk;
}

bool RegistryUtils::writeString(const HKEY rootKey, const String subKey, 
                                const String name, const String value) {
  HKEY key = NULL;
  HRESULT  res = RegCreateKeyEx(rootKey, subKey.c_str(), 0, NULL, 0, 
     KEY_WRITE, NULL, &key, NULL);

  if (res != ERROR_SUCCESS) {
     return false;
  }
  // Write
  res = RegSetValueEx(key, name.c_str(), 0, 
    REG_SZ, (LPBYTE)value.c_str(), (value.size() + 1) * sizeof(Char));
  ::RegCloseKey (key);
  return res == ERROR_SUCCESS;
}

bool RegistryUtils::readString(const HKEY rootKey, const String subKey, 
                               const String name, String& value, const String defaultValue) {
  HKEY key = NULL;

  // Open the appropriate key (select the registry hive based on whether this
  //   is installation was done by an administrator)
  HRESULT res = RegOpenKeyEx (rootKey, subKey.c_str(), 0, KEY_READ, &key);

  bool readOk = false;
  if (res == ERROR_SUCCESS) {
    // Read the value if we can
    CharsVector valueBuffer(kMaxRegistryStringLength);
    DWORD bufSize = kMaxRegistryStringLength * sizeof(TCHAR);
    res = ::RegQueryValueEx(key, name.c_str(), NULL, NULL, (LPBYTE)&valueBuffer[0], &bufSize);
    
    if (res == ERROR_SUCCESS) {
      ::RegCloseKey (key);
       // We have the value - return it
       String tmp(valueBuffer.begin(), 
       valueBuffer.begin() + (bufSize - sizeof(TCHAR)) / sizeof(TCHAR));
       value.swap(tmp);
     
       readOk = true;
    }
  }
  // Copy from programatically supplied default instead
  if (!readOk) {
    value = defaultValue;
  }
  return readOk;
}

bool RegistryUtils::deleteKey(const HKEY rootKey, const String subKey) {
   return RegDeleteKey(rootKey, subKey.c_str()) == ERROR_SUCCESS;
}

bool RegistryUtils::deleteValue(const HKEY rootKey, const String subKey, const String value) {
  bool result = false;
  HKEY key = NULL;
  HRESULT res = RegOpenKeyEx(rootKey, subKey.c_str(), 0, KEY_WRITE, &key);

  if (res == ERROR_SUCCESS) {
    const LRESULT deleteValueResult = ::RegDeleteValue(key, value.c_str());
    ::RegCloseKey(key);
    if (deleteValueResult == ERROR_SUCCESS) {
      result = true;
    }
  }

  return result;
}

bool RegistryUtils::getWritableRegistryKey(HKEY &rootKey) {
	
  String kLowAccessRegistryEntry = _T("Software\\AppDataLow");
	BOOL isMode = FALSE;
  HRESULT res = S_FALSE;
  if (IEIsProtectedModeProcess(&isMode) == S_OK) {
    // if we are under IE then check the rights level
	  if (isMode) {
      // if we have low rights - get the default writable path
	    res = IEGetWriteableHKCU(&rootKey);
	  } else {
      // if we have normal rights - get the same path
	    res = RegCreateKey(HKEY_CURRENT_USER, kLowAccessRegistryEntry.c_str(), &rootKey);
	  }
  } else {
    // if we are running not from IE - get the same path
    res = RegCreateKey(HKEY_CURRENT_USER, kLowAccessRegistryEntry.c_str(), &rootKey);
  }
	return res == S_OK;
}
} // !namespace facebook