/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "StdAfx.h"
#include "HttpUtils.h"

#include <boost/lexical_cast.hpp>

namespace facebook{ namespace HttpUtils{

void doPostRequest(MSXML2::IXMLHTTPRequestPtr httpRequest, 
                   const String& targetURL, 
                   const String& paramsString, 
                   String& response) {

  const HRESULT openResult = httpRequest->open(_T("POST"), 
    targetURL.c_str() , false);
  if FAILED(openResult) {
     _com_raise_error(openResult);
  }
  HRESULT setHeaderRes = httpRequest->setRequestHeader(_T("Content-type"), 
        _T("application/x-www-form-urlencoded"));

  setHeaderRes = httpRequest->setRequestHeader(_T("text/html,application/xhtml+xml"), 
        _T("application/xml;q=0.9,*/*;q=0.8"));

 
  const String contentLength = boost::lexical_cast<String>(paramsString.size());
  setHeaderRes = httpRequest->setRequestHeader(_T("Content-length"), 
    contentLength.c_str());

  const HRESULT sendResult = httpRequest->send(paramsString.c_str());
  if FAILED(sendResult) {
     _com_raise_error(openResult);
  }

  response = toString(httpRequest->responseText);
}

void doPostRequest(const String& targetURL, 
                   const String& paramsString, 
                   String& response) {
  MSXML2::IXMLHTTPRequestPtr httpRequest(CLSID_XMLHTTPRequest);
  doPostRequest(httpRequest, targetURL, paramsString, response);
}

void doGetRequest(MSXML2::IXMLHTTPRequestPtr httpRequest, 
                   const String& targetURL, 
                   String& response) {

  const HRESULT openResult = httpRequest->open(_T("GET"), 
   targetURL.c_str() , false);
  if FAILED(openResult) {
   _com_raise_error(openResult);
  }

  const HRESULT sendResult = httpRequest->send();
  if FAILED(sendResult) {
   _com_raise_error(openResult);
  }
  response = toString(httpRequest->responseText);
}

void doGetRequest(const String& targetURL, 
                   String& response) {
  MSXML2::IXMLHTTPRequestPtr httpRequest(CLSID_XMLHTTPRequest);
  doGetRequest(httpRequest, targetURL, response);
}

}}// !namespace facebook::HttpUtils
