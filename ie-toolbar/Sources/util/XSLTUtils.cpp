/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "StdAfx.h"
#include "XSLTUtils.h"
#include "../common/ResourceMessages.h"

#include <fstream>

#include <boost/algorithm/string/replace.hpp>

#import <msxml3.dll>  named_guids

namespace facebook{ namespace XSLTUtils{


void loadXSLTDoc(MSXML2::IXMLDOMDocumentPtr& xsltDoc, const String& xsltTemplate) {
  _bstr_t xsltTemplateAsBstr(xsltTemplate.c_str());
  const variant_t xsltDocLoadRes = xsltDoc->loadXML(xsltTemplateAsBstr);
  if (xsltDocLoadRes.boolVal == VARIANT_FALSE) {
    throw std::exception("failed to load xslt template");
  }
}

void loadXMLDoc(MSXML2::IXMLDOMDocumentPtr& xmlDoc, const String& xml) {
  _bstr_t xmlAsBSTR(xml.c_str());
  const variant_t xsltDocLoadRes = xmlDoc->loadXML(xmlAsBSTR);
  if (xsltDocLoadRes.boolVal == VARIANT_FALSE) {
    throw std::exception("failed to load xml template");
  }
}

void initializeXLSTemplate(MSXML2::IXSLTemplatePtr& XSLTemplate, 
                           MSXML2::IXMLDOMDocumentPtr& xsltDoc) {
    const variant_t putRefRes = XSLTemplate->putref_stylesheet(xsltDoc);
    // SKIP error processing here since this is not critical   
    //if ((BOOL)putRefRes == FALSE)
    //   throw std::exception("Unable to load style sheet into template!");
}

void initializeProcessor(MSXML2::IXMLDOMDocumentPtr& inputXMLDoc, 
       MSXML2::IXSLProcessorPtr& processor) {
  const HRESULT putInputResult = processor->put_input(_variant_t((IUnknown*)inputXMLDoc));
  if (FAILED(putInputResult)) {
    _com_raise_error(putInputResult);
  }
}

String doXSLTTransofrmation(MSXML2::IXSLProcessorPtr& initializeProcessor) {
  const variant_t transformRes = initializeProcessor->transform();
  if (transformRes.boolVal == 1) {
  throw std::exception("failed to execute XSLT transformation");
  }

  // obtain an result
  VARIANT outputValue;
  const HRESULT getOutputResult = initializeProcessor->get_output(&outputValue);
  if (FAILED(getOutputResult)) {
    _com_raise_error(getOutputResult); 
  }

  _bstr_t valueAsBSTR(outputValue);
  String res(valueAsBSTR);
  return res;
}

void insertMessages(String& xsltTemplate, const String messsage) {
  using boost::replace_all;
  replace_all(xsltTemplate, _T("[@") + messsage + _T("]"), ResourceMessages::getMessage(messsage));
}

void insertMessages(String& xsltTemplate, const String messsage, const String messsageKey) {
  using boost::replace_all;
  replace_all(xsltTemplate, _T("[@") + messsage + _T("]"), ResourceMessages::getMessage(messsageKey));
}

String generateHtml(String xsltTemplate, const String& xml) {
  try {
    using boost::replace_all;
    // add messages to actions
    insertMessages(xsltTemplate, kHtmlMessage);
    insertMessages(xsltTemplate, kHtmlPoke);
    insertMessages(xsltTemplate, kHtmlWallPost);
    insertMessages(xsltTemplate, kHtmlPopupMessage);
    insertMessages(xsltTemplate, kHtmlPopupPoke);
    insertMessages(xsltTemplate, kHtmlPopupWallPost);

    // repalace "see all ## frinends
    // message to put into html template
    String message = ResourceMessages::getMessage(kHtmlSeeAllFriends);
    //convert friends To Show count to string
    String friendsCountString;
    replace_all(message, _T("{1}"), _T("<xsl:value-of select=\"count(/friends/friend)\"/>"));

    replace_all(xsltTemplate, _T("@seeAll"), message);

    replace_all(xsltTemplate, _T("{1}"), _T("<xsl:value-of select=\"/friends/friend/name\"/>"));
    
    MSXML2::IXMLDOMDocumentPtr xmlDoc(MSXML2::CLSID_DOMDocument);
    MSXML2::IXMLDOMDocumentPtr xsltDoc(MSXML2::CLSID_FreeThreadedDOMDocument);
    MSXML2::IXSLTemplatePtr XSLTemplate(MSXML2::CLSID_XSLTemplate);

    loadXSLTDoc(xsltDoc,  xsltTemplate);
    loadXMLDoc(xmlDoc, xml);
    initializeXLSTemplate(XSLTemplate, xsltDoc);

    MSXML2::IXSLProcessorPtr processor(XSLTemplate->createProcessor());
    initializeProcessor(xmlDoc, processor);

    String htmlStr = doXSLTTransofrmation(processor);

    // TODO : to this at one pass

    // MSXML  leaves characters like < > encoded after XSLT processing 
    // so we have to decode these characters ....

    replace_all(htmlStr, _T("&amp;"), _T("&"));
    replace_all(htmlStr, _T("&gt;"), _T(">"));
    replace_all(htmlStr, _T("&lt;"), _T("<"));
    replace_all(htmlStr, _T("&quot;"), _T("\""));
    replace_all(htmlStr, _T("\t\t"), _T("\r\n"));

    return htmlStr;

  } catch(_com_error &e) {
    throw e;
  } catch(...) {
    throw;
  }
  return _T("");
}

}}// !namespace facebook::XSLTUtils
