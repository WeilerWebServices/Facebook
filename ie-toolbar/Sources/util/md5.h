/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#ifndef md5_H
#define md5_H

#include "StringUtils.h"

namespace facebook {
  /**
   * Performs the md5 algorithm on a String string, returning
   *  the results as a String*.
   * @param szString an value that need to be decoded in to md5 (by pointer)
   */
  TCHAR* md5String(String szString);

class md5 {
   // Methods
public:
  md5() { init(); }

  /**
   * Initializes a new context.
   */
  void  init();

  /**
   * md5 block update operation. Continues an md5 message-digest
   * operation, processing another message block, and updating the
   * context. 
   */
  void  update(BYTE* chInput, UINT nInputLen);

  /**
   * md5 finalization. Ends an md5 message-digest operation, writing
   * the message digest and zeroizing the context.
   * 
   */
  void  finalize();

  BYTE* digest() { return digest_; }


  /**
   * encode UNICODE string to utf8 encoding
   * 
   * 
   */
  NarrowString encodeUtf8(const TCHAR* originalString);

  // methods
private:

  

  /**
   *  md5 basic transformation. transforms state based on block.
   */
  void  transform(BYTE* block);

  /**
   * encodes input (UINT) into output (BYTE). Assumes nLength is
   * a multiple of 4.
   */
  void  encode(BYTE* dest, UINT* src, UINT nLength);

  /**
   * decodes input (BYTE) into output (UINT). Assumes nLength is
   * a multiple of 4.
   *
   */
  void  decode(UINT* dest, BYTE* src, UINT nLength);


  inline  UINT  rotate_left(UINT x, UINT n) { 
    return ((x << n) | (x >> (32-n))); 
  }

  inline  UINT  F(UINT x, UINT y, UINT z) { 
    return ((x & y) | (~x & z)); 
  }

  inline  UINT  G(UINT x, UINT y, UINT z) { 
    return ((x & z) | (y & ~z)); 
  }

  inline  UINT  H(UINT x, UINT y, UINT z) { 
    return (x ^ y ^ z); 
  }

  inline  UINT  I(UINT x, UINT y, UINT z) { 
    return (y ^ (x | ~z)); 
  }

  inline  void  FF(UINT& a, UINT b, UINT c, UINT d, UINT x, UINT s, UINT ac) { 
     a += F(b, c, d) + x + ac; a = rotate_left(a, s); a += b; 
  }

  inline  void  GG(UINT& a, UINT b, UINT c, UINT d, UINT x, UINT s, UINT ac) { 
     a += G(b, c, d) + x + ac; a = rotate_left(a, s); a += b; 
  }

  inline  void  HH(UINT& a, UINT b, UINT c, UINT d, UINT x, UINT s, UINT ac) { 
     a += H(b, c, d) + x + ac; a = rotate_left(a, s); a += b; 
  }

  inline  void  II(UINT& a, UINT b, UINT c, UINT d, UINT x, UINT s, UINT ac) {
     a += I(b, c, d) + x + ac; a = rotate_left(a, s); a += b; 
  }

   // Data
private:
   UINT    state_[4];
   UINT    count_[2];
   BYTE    buffer_[64];
   BYTE    digest_[16];
   BYTE    finalized_;
};

} // !namespace facebook

#endif