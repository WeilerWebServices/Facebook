/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

// This file was copied from Facebook Toolbar project

#ifndef STRINGUTILS_H
#define STRINGUTILS_H


#include <comdef.h>
#include <tchar.h>
#include <sstream>
#include <string>
#include <vector>
#include <functional>

#ifdef _ATL
#include <atlstr.h>
#elif _AFX
#include <afxstr.h>
#endif


/**
 * This define different typedefs related to std::string
 * to provide flexible and sing approach of using std::string 
 * in Unicode/ascii
 * Also different auxiliary * methods are concentrated here
 */
namespace facebook {

// Types

typedef TCHAR Char;

typedef std::vector<Char> CharsVector;

typedef std::basic_string<Char> String;

typedef std::basic_stringstream<Char> StringStream;

typedef std::ctype<Char> CType;

typedef std::vector<String> StringsVector;

typedef std::basic_string<char> NarrowString;

typedef std::basic_string<wchar_t> WidenString;


// Functions

/**
 * Convert CLSID to String
 *
 * @param classId a CLSID that need to be converted to String (by const-ref)
 *
 * @return converted string (by value)
 */
String toString(const CLSID& classId);

/**
 * Convert String to _bstr_t
 *
 * @param text a String value that need to be converted to _bstr_t (by const-ref)
 *
 * @return converted string (by value)
 */

_bstr_t toBSTR(const String& text);

/**
 * Convert _bstr_t to String
 *
 * @param bstr a _bstr_t value that need to be converted to String (by value)
 *
 * @return converted string (by value)
 */

String toString(_bstr_t bstr);

/**
 * Load String from recources file
 *
 * @param stringId a id of string in resources file (by const)
 *
 * @return converted string (by value)
 */

String loadString(const UINT stringId);

/**
 * Convert NarrowString to WidenString
 *
 * @param narrow a NarrowString value that need to be converted 
 * to WidenString (by const-ref)
 *
 * @return converted string (by value)
 */
WidenString toWiden(const NarrowString& narrow);

inline
WidenString toWiden(const WidenString& widen) {
   return widen;
}

inline
NarrowString toNarrow(const NarrowString& narrow) {
  return narrow;
}

NarrowString toNarrow(const WidenString& widen);


/**
 * struct StringCILess
 *
 * This predicate is provides case-insensitive 
 * less implementation for String and String
 *
 */
struct StringCILess : public std::binary_function<String, String, bool> {

  // Types

  struct CharCILess {

    // Constructors
    CharCILess(const CType& ct): type_(ct) {
    }

    // Operators

    bool operator ()(Char first, Char second) const {
       return type_.toupper(first) < type_.toupper(second);
    }

    // Members

    const CType& type_; // 

  };

  // Constructors

  StringCILess(const std::locale& locale = std::locale::classic());

  // Operators

  bool operator ()(const String& first, const String& second) const;

  // Members
  const std::locale& locale_;
  const CType& type_;
};


inline
bool isEmpty(const String& string) {
   return string.empty();
}


#ifdef _ATL

inline
bool isEmpty(const ATL::CAtlString& string) {
   return string.IsEmpty();
}

#else

inline
bool isEmpty(const CString& string) {
   return string.IsEmpty();
}

#endif // _ATL


} // !namespace facebook


#endif // STRINGUTILS_H
