/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/

#include "Stdafx.h"

#include <algorithm>
#include <cctype>

#include "CommonConstants.h"
#include "LocaleUtils.h"

#include "../util/RegistryUtils.h"

namespace facebook {

/**
 * Returns locale ID from Language - Country/Region format
 * @param localeMap initialize locale map
 * @param locale Language - Country/Region format
 * @retun locale ID
 */
int shortLocaleToLocaleId(LocaleMap& localeMap, String locale) {
  int result = 0;
  if (locale.empty()) {
    return result;
  }

  // Find locale ID by locale short format in the map
  for (LocaleIterator it = localeMap.begin(); it != localeMap.end(); it++) {
    if (!locale.compare((*it).second.getShortLocale())) {
      result = (*it).first;
      break;
    }
  }

   return result;
}

/**
 * Get locale in short format from the registry setting
 * @return locale in short format
 */
String localeRegSetting() {
  String result;

  // Read string value from current user
  try{
    RegistryUtils::readString(HKEY_CURRENT_USER, 
      kLangRegistryPath, kLangRegistryValue, result);
  }
  catch (...) {
  }

  return result;
}

String localeIdToShortLocale(int localeId) {
  // Determine string size for language and country codes
  int langLength = GetLocaleInfoW(localeId, LOCALE_SISO639LANGNAME, NULL, 0);
  int countryLength = GetLocaleInfoW(localeId, LOCALE_SISO3166CTRYNAME, NULL, 0);
  
  Char* languageCode = new Char[langLength];
  Char* countryCode = new Char[countryLength];

  // Get language name from locale ID
  GetLocaleInfoW(localeId, LOCALE_SISO639LANGNAME, languageCode, langLength);
  // Get country from locale ID
  GetLocaleInfoW(localeId, LOCALE_SISO3166CTRYNAME, countryCode, countryLength);
  
  // Concat language and country strings to the short locale format
  std::wstringstream resultStream;
  resultStream << languageCode << "-" << countryCode;
  
  delete[] languageCode;
  delete[] countryCode;
  String result = resultStream.str();
  std::transform(result.begin(), result.end(), result.begin(), std::tolower);
  
  return result;
}

int localeIdFromRegistry(LocaleMap& locale) {
  // Transform short locale format to the locale ID
  return shortLocaleToLocaleId(locale, localeRegSetting());
}

} // !namespace facebook