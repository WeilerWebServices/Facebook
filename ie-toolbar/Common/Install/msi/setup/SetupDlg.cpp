/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/

#include "Stdafx.h"

#include "Resource.h"

#include "CommonConstants.h"
#include "MsiUtils.h"
#include "Setup.h"
#include "SetupDlg.h"

namespace facebook {

// ---------------------------------------------------------------------
// class SetupDlg
// ---------------------------------------------------------------------

SetupDlg::SetupDlg(CWnd* pParent)
	: CDialog(SetupDlg::IDD, pParent) {
	icon_ = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
  initLocaleMap();
}

void SetupDlg::DoDataExchange(CDataExchange* pDX) {
  CDialog::DoDataExchange(pDX);
  DDX_Control(pDX, IDC_LANGCOMBO, langCombo_);
}

BEGIN_MESSAGE_MAP(SetupDlg, CDialog)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	//}}AFX_MSG_MAP
  ON_BN_CLICKED(IDOK, &SetupDlg::OnBnClickedOk)
  ON_BN_CLICKED(IDCANCEL, &SetupDlg::OnBnClickedCancel)
  ON_WM_SHOWWINDOW()
END_MESSAGE_MAP()

BOOL SetupDlg::OnInitDialog() {
	CDialog::OnInitDialog();

  // Disable language combo box if same product version installed
  String productCode = getMsiProductCode();
  if (isProductInstalled(productCode)) {
    GetDlgItem(IDC_LANGCOMBO)->EnableWindow(false);
  }

  // Create line from static box
  CRect rect;
  GetDlgItem(IDC_LINE)->GetClientRect(&rect);
  GetDlgItem(IDC_LINE)->SetWindowPos(
    NULL, 0, 0, rect.Width(), 2, SWP_NOZORDER | SWP_NOMOVE);

  // Create line from static box
  GetDlgItem(IDC_LINE2)->GetClientRect(&rect);
  GetDlgItem(IDC_LINE2)->SetWindowPos(
    NULL, 0, 0, rect.Width(), 2, SWP_NOZORDER | SWP_NOMOVE);

	SetIcon(icon_, TRUE);
	SetIcon(icon_, FALSE);

  // Fill combo box
  loadLanguageNames();
  // Set current language in the combo box
  selectCurrentLang();

	return TRUE;
}

void SetupDlg::loadLanguageNames() {
  for (LocaleIterator it = locale_.begin(); 
    it != locale_.end(); it++) {
    langCombo_.SetItemData(langCombo_.
      AddString((*it).second.getLangName().c_str()), (*it).first);
  }
}

void SetupDlg::selectCurrentLang() {
  // Get locale ID from registry
  int localeId = localeIdFromRegistry(locale_);
  for(int i = 0; i < langCombo_.GetCount(); i++) {
    // Set English if language not supported by installer
    if(kEnglishLocalId == langCombo_.GetItemData(i)) {
      langCombo_.SetCurSel(i);
      continue;
    }

    // Set languge if compare success
    if(localeId == langCombo_.GetItemData(i)) {
      langCombo_.SetCurSel(i);
      break;
    }
  }
}

void SetupDlg::OnPaint() {
  if (IsIconic())	{
	  return;	
	}

	CDialog::OnPaint();
  // Draw welcome text in the white rectangle with custom font
  CFont font;
  CWnd * headerRectangle = GetDlgItem(IDC_BKG);
  CPaintDC dc(headerRectangle);
  font.CreateFont(20, 0, 0, 0, FW_DEMIBOLD, FALSE, FALSE, FALSE, 0, OUT_DEFAULT_PRECIS, 
    CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH, _T("Sans Serif"));
  dc.SelectObject(font); 
  CRect rect;
  headerRectangle->GetClientRect(&rect);
  dc.FillSolidRect(rect, RGB(255, 255, 255));
  rect.top += 10;
  rect.left += 10; 
  dc.DrawText(kWelcomeMessage.c_str(), &rect, DT_NOCLIP);
}

HCURSOR SetupDlg::OnQueryDragIcon() {
	return static_cast<HCURSOR>(icon_);
}


void SetupDlg::OnBnClickedOk() {
  int localeId = langCombo_.GetItemData(langCombo_.GetCurSel());
  // Copy .msi and .mst files to the temp folder
  prepareMsiData(localeId); 
  // Execute msi
  runMsi(localeId);

  OnOK();
}

void SetupDlg::OnBnClickedCancel() {
  OnCancel();
}

void SetupDlg::OnShowWindow(BOOL isShown, UINT status) {
  CDialog::OnShowWindow(isShown, status);

  if (isShown)
  {
    // Need this for activate setup welcome window after msi opening window
    ShowWindow(SW_MINIMIZE);
    ShowWindow(SW_RESTORE);
  }
}

void SetupDlg::initLocaleMap() {
  locale_[kEnglishLocalId] = LocaleChart(kEnglishLangName, kEnglishShortLocale);
  locale_[kChinaLocalId] = LocaleChart(kChinaLangName, kChinaShortLocale);
  locale_[kTaiwanLocalId] = LocaleChart(kTaiwanLangName, kTaiwanShortLocale);
  locale_[kFranceLocalId] = LocaleChart(kFrancehLangName, kFranceShortLocale);
  locale_[kGermanyLocalId] = LocaleChart(kGermanyLangName, kGermanyShortLocale);
  locale_[kItalyLocalId] = LocaleChart(kItalyLangName, kItalyShortLocale);
  locale_[kJapanLocalId] = LocaleChart(kJapanLangName, kJapanShortLocale);
  locale_[kBrazilLocalId] = LocaleChart(kBrazilLangName, kBrazilShortLocale);
  locale_[kSpainLocalId] = LocaleChart(kSpainLangName, kSpainShortLocale);
  locale_[kDenmarkLocalId] = LocaleChart(kDenmarkLangName, kDenmarkShortLocale);
  locale_[kNetherlandsLocalId] = LocaleChart(kNetherlandsLangName, kNetherlandsShortLocale);
  locale_[kSwedenLocalId] = LocaleChart(kSwedenLangName, kSwedenShortLocale);
  locale_[kTurkeyLocalId] = LocaleChart(kTurkeyLangName, kTurkeyShortLocale);
  locale_[kIndonesiaLocalId] = LocaleChart(kIndonesiaLangName, kIndonesiaShortLocale);
  locale_[kArabicLocalId] = LocaleChart(kArabicLangName, kArabicShortLocale);
  locale_[kIsraelLocalId] = LocaleChart(kIsraelLangName, kIsraelShortLocale);
  locale_[kUkraineLocalId] = LocaleChart(kUkraineLangName, kUkraineShortLocale);
}

} // !namespace facebook
